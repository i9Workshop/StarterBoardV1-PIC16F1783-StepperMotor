

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Thu Sep 26 17:38:14 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F1783
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,space=0,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,space=0,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,space=0,merge=1,split=1,delta=2
    10                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2,group=2
    14                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2,group=2
    17                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2,group=1
    18                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2,group=1
    19                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2
    22                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2
    23                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2
    24                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    25                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    26                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2
    27                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2
    28                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2
    29                           	psect	text20,local,class=CODE,space=0,merge=1,delta=2
    30                           	psect	text21,local,class=CODE,space=0,merge=1,delta=2
    31                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    32                           	dabs	1,0x7E,2
    33     0000                     
    34                           ; Generated 07/09/2023 GMT
    35                           ; 
    36                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution. Publication is not required when
    50                           ;        this file is used in an embedded application.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC16F1783 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68     0008                     bsr             equ	8
    69     0005                     fsr0h           equ	5
    70     0004                     fsr0l           equ	4
    71     0007                     fsr1h           equ	7
    72     0006                     fsr1l           equ	6
    73     0000                     indf            equ	0
    74     0000                     indf0           equ	0
    75     0001                     indf1           equ	1
    76     000B                     intcon          equ	11
    77     0002                     pc              equ	2
    78     0002                     pcl             equ	2
    79     000A                     pclath          equ	10
    80     0003                     status          equ	3
    81     0009                     wreg            equ	9
    82     0000                     INDF0           equ	0	;# 
    83     0001                     INDF1           equ	1	;# 
    84     0002                     PCL             equ	2	;# 
    85     0003                     STATUS          equ	3	;# 
    86     0004                     FSR0L           equ	4	;# 
    87     0005                     FSR0H           equ	5	;# 
    88     0006                     FSR1L           equ	6	;# 
    89     0007                     FSR1H           equ	7	;# 
    90     0008                     BSR             equ	8	;# 
    91     0009                     WREG            equ	9	;# 
    92     000A                     PCLATH          equ	10	;# 
    93     000B                     INTCON          equ	11	;# 
    94     000C                     PORTA           equ	12	;# 
    95     000D                     PORTB           equ	13	;# 
    96     000E                     PORTC           equ	14	;# 
    97     0010                     PORTE           equ	16	;# 
    98     0011                     PIR1            equ	17	;# 
    99     0012                     PIR2            equ	18	;# 
   100     0014                     PIR4            equ	20	;# 
   101     0015                     TMR0            equ	21	;# 
   102     0016                     TMR1            equ	22	;# 
   103     0016                     TMR1L           equ	22	;# 
   104     0017                     TMR1H           equ	23	;# 
   105     0018                     T1CON           equ	24	;# 
   106     0019                     T1GCON          equ	25	;# 
   107     001A                     TMR2            equ	26	;# 
   108     001B                     PR2             equ	27	;# 
   109     001C                     T2CON           equ	28	;# 
   110     008C                     TRISA           equ	140	;# 
   111     008D                     TRISB           equ	141	;# 
   112     008E                     TRISC           equ	142	;# 
   113     0090                     TRISE           equ	144	;# 
   114     0091                     PIE1            equ	145	;# 
   115     0092                     PIE2            equ	146	;# 
   116     0094                     PIE4            equ	148	;# 
   117     0095                     OPTION_REG      equ	149	;# 
   118     0096                     PCON            equ	150	;# 
   119     0097                     WDTCON          equ	151	;# 
   120     0098                     OSCTUNE         equ	152	;# 
   121     0099                     OSCCON          equ	153	;# 
   122     009A                     OSCSTAT         equ	154	;# 
   123     009B                     ADRES           equ	155	;# 
   124     009B                     ADRESL          equ	155	;# 
   125     009C                     ADRESH          equ	156	;# 
   126     009D                     ADCON0          equ	157	;# 
   127     009E                     ADCON1          equ	158	;# 
   128     009F                     ADCON2          equ	159	;# 
   129     010C                     LATA            equ	268	;# 
   130     010D                     LATB            equ	269	;# 
   131     010E                     LATC            equ	270	;# 
   132     0111                     CM1CON0         equ	273	;# 
   133     0112                     CM1CON1         equ	274	;# 
   134     0113                     CM2CON0         equ	275	;# 
   135     0114                     CM2CON1         equ	276	;# 
   136     0115                     CMOUT           equ	277	;# 
   137     0116                     BORCON          equ	278	;# 
   138     0117                     FVRCON          equ	279	;# 
   139     0118                     DACCON0         equ	280	;# 
   140     0119                     DACCON1         equ	281	;# 
   141     011D                     APFCON          equ	285	;# 
   142     011D                     APFCON0         equ	285	;# 
   143     011E                     CM3CON0         equ	286	;# 
   144     011F                     CM3CON1         equ	287	;# 
   145     018C                     ANSELA          equ	396	;# 
   146     018D                     ANSELB          equ	397	;# 
   147     0191                     EEADR           equ	401	;# 
   148     0191                     EEADRL          equ	401	;# 
   149     0192                     EEADRH          equ	402	;# 
   150     0193                     EEDAT           equ	403	;# 
   151     0193                     EEDATL          equ	403	;# 
   152     0193                     EEDATA          equ	403	;# 
   153     0194                     EEDATH          equ	404	;# 
   154     0195                     EECON1          equ	405	;# 
   155     0196                     EECON2          equ	406	;# 
   156     0197                     VREGCON         equ	407	;# 
   157     0199                     RC1REG          equ	409	;# 
   158     0199                     RCREG           equ	409	;# 
   159     0199                     RCREG1          equ	409	;# 
   160     019A                     TX1REG          equ	410	;# 
   161     019A                     TXREG1          equ	410	;# 
   162     019A                     TXREG           equ	410	;# 
   163     019B                     SP1BRG          equ	411	;# 
   164     019B                     SPBRG           equ	411	;# 
   165     019B                     SP1BRGL         equ	411	;# 
   166     019B                     SPBRG1          equ	411	;# 
   167     019B                     SPBRGL          equ	411	;# 
   168     019C                     SP1BRGH         equ	412	;# 
   169     019C                     SPBRGH          equ	412	;# 
   170     019C                     SPBRGH1         equ	412	;# 
   171     019D                     RC1STA          equ	413	;# 
   172     019D                     RCSTA1          equ	413	;# 
   173     019D                     RCSTA           equ	413	;# 
   174     019E                     TX1STA          equ	414	;# 
   175     019E                     TXSTA1          equ	414	;# 
   176     019E                     TXSTA           equ	414	;# 
   177     019F                     BAUD1CON        equ	415	;# 
   178     019F                     BAUDCON1        equ	415	;# 
   179     019F                     BAUDCTL1        equ	415	;# 
   180     019F                     BAUDCON         equ	415	;# 
   181     019F                     BAUDCTL         equ	415	;# 
   182     020C                     WPUA            equ	524	;# 
   183     020D                     WPUB            equ	525	;# 
   184     020E                     WPUC            equ	526	;# 
   185     0210                     WPUE            equ	528	;# 
   186     0211                     SSPBUF          equ	529	;# 
   187     0211                     SSP1BUF         equ	529	;# 
   188     0212                     SSPADD          equ	530	;# 
   189     0212                     SSP1ADD         equ	530	;# 
   190     0213                     SSPMSK          equ	531	;# 
   191     0213                     SSP1MSK         equ	531	;# 
   192     0214                     SSPSTAT         equ	532	;# 
   193     0214                     SSP1STAT        equ	532	;# 
   194     0215                     SSPCON1         equ	533	;# 
   195     0215                     SSP1CON         equ	533	;# 
   196     0215                     SSPCON          equ	533	;# 
   197     0216                     SSPCON2         equ	534	;# 
   198     0216                     SSP1CON2        equ	534	;# 
   199     0217                     SSPCON3         equ	535	;# 
   200     0217                     SSP1CON3        equ	535	;# 
   201     028C                     ODCONA          equ	652	;# 
   202     028D                     ODCONB          equ	653	;# 
   203     028E                     ODCONC          equ	654	;# 
   204     0291                     CCPR1           equ	657	;# 
   205     0291                     CCPR1L          equ	657	;# 
   206     0292                     CCPR1H          equ	658	;# 
   207     0293                     CCP1CON         equ	659	;# 
   208     0298                     CCPR2           equ	664	;# 
   209     0298                     CCPR2L          equ	664	;# 
   210     0299                     CCPR2H          equ	665	;# 
   211     029A                     CCP2CON         equ	666	;# 
   212     030C                     SLRCONA         equ	780	;# 
   213     030D                     SLRCONB         equ	781	;# 
   214     030E                     SLRCONC         equ	782	;# 
   215     038C                     INLVLA          equ	908	;# 
   216     038D                     INLVLB          equ	909	;# 
   217     038E                     INLVLC          equ	910	;# 
   218     0390                     INLVLE          equ	912	;# 
   219     0391                     IOCAP           equ	913	;# 
   220     0392                     IOCAN           equ	914	;# 
   221     0393                     IOCAF           equ	915	;# 
   222     0394                     IOCBP           equ	916	;# 
   223     0395                     IOCBN           equ	917	;# 
   224     0396                     IOCBF           equ	918	;# 
   225     0397                     IOCCP           equ	919	;# 
   226     0398                     IOCCN           equ	920	;# 
   227     0399                     IOCCF           equ	921	;# 
   228     039D                     IOCEP           equ	925	;# 
   229     039E                     IOCEN           equ	926	;# 
   230     039F                     IOCEF           equ	927	;# 
   231     0511                     OPA1CON         equ	1297	;# 
   232     0513                     OPA2CON         equ	1299	;# 
   233     051A                     CLKRCON         equ	1306	;# 
   234     0811                     PSMC1CON        equ	2065	;# 
   235     0812                     PSMC1MDL        equ	2066	;# 
   236     0813                     PSMC1SYNC       equ	2067	;# 
   237     0814                     PSMC1CLK        equ	2068	;# 
   238     0815                     PSMC1OEN        equ	2069	;# 
   239     0816                     PSMC1POL        equ	2070	;# 
   240     0817                     PSMC1BLNK       equ	2071	;# 
   241     0818                     PSMC1REBS       equ	2072	;# 
   242     0819                     PSMC1FEBS       equ	2073	;# 
   243     081A                     PSMC1PHS        equ	2074	;# 
   244     081B                     PSMC1DCS        equ	2075	;# 
   245     081C                     PSMC1PRS        equ	2076	;# 
   246     081D                     PSMC1ASDC       equ	2077	;# 
   247     081E                     PSMC1ASDL       equ	2078	;# 
   248     081F                     PSMC1ASDS       equ	2079	;# 
   249     0820                     PSMC1INT        equ	2080	;# 
   250     0821                     PSMC1PH         equ	2081	;# 
   251     0821                     PSMC1PHL        equ	2081	;# 
   252     0822                     PSMC1PHH        equ	2082	;# 
   253     0823                     PSMC1DC         equ	2083	;# 
   254     0823                     PSMC1DCL        equ	2083	;# 
   255     0824                     PSMC1DCH        equ	2084	;# 
   256     0825                     PSMC1PR         equ	2085	;# 
   257     0825                     PSMC1PRL        equ	2085	;# 
   258     0826                     PSMC1PRH        equ	2086	;# 
   259     0827                     PSMC1TMR        equ	2087	;# 
   260     0827                     PSMC1TMRL       equ	2087	;# 
   261     0828                     PSMC1TMRH       equ	2088	;# 
   262     0829                     PSMC1DBR        equ	2089	;# 
   263     082A                     PSMC1DBF        equ	2090	;# 
   264     082B                     PSMC1BLKR       equ	2091	;# 
   265     082C                     PSMC1BLKF       equ	2092	;# 
   266     082D                     PSMC1FFA        equ	2093	;# 
   267     082E                     PSMC1STR0       equ	2094	;# 
   268     082F                     PSMC1STR1       equ	2095	;# 
   269     0831                     PSMC2CON        equ	2097	;# 
   270     0832                     PSMC2MDL        equ	2098	;# 
   271     0833                     PSMC2SYNC       equ	2099	;# 
   272     0834                     PSMC2CLK        equ	2100	;# 
   273     0835                     PSMC2OEN        equ	2101	;# 
   274     0836                     PSMC2POL        equ	2102	;# 
   275     0837                     PSMC2BLNK       equ	2103	;# 
   276     0838                     PSMC2REBS       equ	2104	;# 
   277     0839                     PSMC2FEBS       equ	2105	;# 
   278     083A                     PSMC2PHS        equ	2106	;# 
   279     083B                     PSMC2DCS        equ	2107	;# 
   280     083C                     PSMC2PRS        equ	2108	;# 
   281     083D                     PSMC2ASDC       equ	2109	;# 
   282     083E                     PSMC2ASDL       equ	2110	;# 
   283     083F                     PSMC2ASDS       equ	2111	;# 
   284     0840                     PSMC2INT        equ	2112	;# 
   285     0841                     PSMC2PH         equ	2113	;# 
   286     0841                     PSMC2PHL        equ	2113	;# 
   287     0842                     PSMC2PHH        equ	2114	;# 
   288     0843                     PSMC2DC         equ	2115	;# 
   289     0843                     PSMC2DCL        equ	2115	;# 
   290     0844                     PSMC2DCH        equ	2116	;# 
   291     0845                     PSMC2PR         equ	2117	;# 
   292     0845                     PSMC2PRL        equ	2117	;# 
   293     0846                     PSMC2PRH        equ	2118	;# 
   294     0847                     PSMC2TMR        equ	2119	;# 
   295     0847                     PSMC2TMRL       equ	2119	;# 
   296     0848                     PSMC2TMRH       equ	2120	;# 
   297     0849                     PSMC2DBR        equ	2121	;# 
   298     084A                     PSMC2DBF        equ	2122	;# 
   299     084B                     PSMC2BLKR       equ	2123	;# 
   300     084C                     PSMC2BLKF       equ	2124	;# 
   301     084D                     PSMC2FFA        equ	2125	;# 
   302     084E                     PSMC2STR0       equ	2126	;# 
   303     084F                     PSMC2STR1       equ	2127	;# 
   304     0FE4                     STATUS_SHAD     equ	4068	;# 
   305     0FE5                     WREG_SHAD       equ	4069	;# 
   306     0FE6                     BSR_SHAD        equ	4070	;# 
   307     0FE7                     PCLATH_SHAD     equ	4071	;# 
   308     0FE8                     FSR0L_SHAD      equ	4072	;# 
   309     0FE9                     FSR0H_SHAD      equ	4073	;# 
   310     0FEA                     FSR1L_SHAD      equ	4074	;# 
   311     0FEB                     FSR1H_SHAD      equ	4075	;# 
   312     0FED                     STKPTR          equ	4077	;# 
   313     0FEE                     TOSL            equ	4078	;# 
   314     0FEF                     TOSH            equ	4079	;# 
   315     0000                     INDF0           equ	0	;# 
   316     0001                     INDF1           equ	1	;# 
   317     0002                     PCL             equ	2	;# 
   318     0003                     STATUS          equ	3	;# 
   319     0004                     FSR0L           equ	4	;# 
   320     0005                     FSR0H           equ	5	;# 
   321     0006                     FSR1L           equ	6	;# 
   322     0007                     FSR1H           equ	7	;# 
   323     0008                     BSR             equ	8	;# 
   324     0009                     WREG            equ	9	;# 
   325     000A                     PCLATH          equ	10	;# 
   326     000B                     INTCON          equ	11	;# 
   327     000C                     PORTA           equ	12	;# 
   328     000D                     PORTB           equ	13	;# 
   329     000E                     PORTC           equ	14	;# 
   330     0010                     PORTE           equ	16	;# 
   331     0011                     PIR1            equ	17	;# 
   332     0012                     PIR2            equ	18	;# 
   333     0014                     PIR4            equ	20	;# 
   334     0015                     TMR0            equ	21	;# 
   335     0016                     TMR1            equ	22	;# 
   336     0016                     TMR1L           equ	22	;# 
   337     0017                     TMR1H           equ	23	;# 
   338     0018                     T1CON           equ	24	;# 
   339     0019                     T1GCON          equ	25	;# 
   340     001A                     TMR2            equ	26	;# 
   341     001B                     PR2             equ	27	;# 
   342     001C                     T2CON           equ	28	;# 
   343     008C                     TRISA           equ	140	;# 
   344     008D                     TRISB           equ	141	;# 
   345     008E                     TRISC           equ	142	;# 
   346     0090                     TRISE           equ	144	;# 
   347     0091                     PIE1            equ	145	;# 
   348     0092                     PIE2            equ	146	;# 
   349     0094                     PIE4            equ	148	;# 
   350     0095                     OPTION_REG      equ	149	;# 
   351     0096                     PCON            equ	150	;# 
   352     0097                     WDTCON          equ	151	;# 
   353     0098                     OSCTUNE         equ	152	;# 
   354     0099                     OSCCON          equ	153	;# 
   355     009A                     OSCSTAT         equ	154	;# 
   356     009B                     ADRES           equ	155	;# 
   357     009B                     ADRESL          equ	155	;# 
   358     009C                     ADRESH          equ	156	;# 
   359     009D                     ADCON0          equ	157	;# 
   360     009E                     ADCON1          equ	158	;# 
   361     009F                     ADCON2          equ	159	;# 
   362     010C                     LATA            equ	268	;# 
   363     010D                     LATB            equ	269	;# 
   364     010E                     LATC            equ	270	;# 
   365     0111                     CM1CON0         equ	273	;# 
   366     0112                     CM1CON1         equ	274	;# 
   367     0113                     CM2CON0         equ	275	;# 
   368     0114                     CM2CON1         equ	276	;# 
   369     0115                     CMOUT           equ	277	;# 
   370     0116                     BORCON          equ	278	;# 
   371     0117                     FVRCON          equ	279	;# 
   372     0118                     DACCON0         equ	280	;# 
   373     0119                     DACCON1         equ	281	;# 
   374     011D                     APFCON          equ	285	;# 
   375     011D                     APFCON0         equ	285	;# 
   376     011E                     CM3CON0         equ	286	;# 
   377     011F                     CM3CON1         equ	287	;# 
   378     018C                     ANSELA          equ	396	;# 
   379     018D                     ANSELB          equ	397	;# 
   380     0191                     EEADR           equ	401	;# 
   381     0191                     EEADRL          equ	401	;# 
   382     0192                     EEADRH          equ	402	;# 
   383     0193                     EEDAT           equ	403	;# 
   384     0193                     EEDATL          equ	403	;# 
   385     0193                     EEDATA          equ	403	;# 
   386     0194                     EEDATH          equ	404	;# 
   387     0195                     EECON1          equ	405	;# 
   388     0196                     EECON2          equ	406	;# 
   389     0197                     VREGCON         equ	407	;# 
   390     0199                     RC1REG          equ	409	;# 
   391     0199                     RCREG           equ	409	;# 
   392     0199                     RCREG1          equ	409	;# 
   393     019A                     TX1REG          equ	410	;# 
   394     019A                     TXREG1          equ	410	;# 
   395     019A                     TXREG           equ	410	;# 
   396     019B                     SP1BRG          equ	411	;# 
   397     019B                     SPBRG           equ	411	;# 
   398     019B                     SP1BRGL         equ	411	;# 
   399     019B                     SPBRG1          equ	411	;# 
   400     019B                     SPBRGL          equ	411	;# 
   401     019C                     SP1BRGH         equ	412	;# 
   402     019C                     SPBRGH          equ	412	;# 
   403     019C                     SPBRGH1         equ	412	;# 
   404     019D                     RC1STA          equ	413	;# 
   405     019D                     RCSTA1          equ	413	;# 
   406     019D                     RCSTA           equ	413	;# 
   407     019E                     TX1STA          equ	414	;# 
   408     019E                     TXSTA1          equ	414	;# 
   409     019E                     TXSTA           equ	414	;# 
   410     019F                     BAUD1CON        equ	415	;# 
   411     019F                     BAUDCON1        equ	415	;# 
   412     019F                     BAUDCTL1        equ	415	;# 
   413     019F                     BAUDCON         equ	415	;# 
   414     019F                     BAUDCTL         equ	415	;# 
   415     020C                     WPUA            equ	524	;# 
   416     020D                     WPUB            equ	525	;# 
   417     020E                     WPUC            equ	526	;# 
   418     0210                     WPUE            equ	528	;# 
   419     0211                     SSPBUF          equ	529	;# 
   420     0211                     SSP1BUF         equ	529	;# 
   421     0212                     SSPADD          equ	530	;# 
   422     0212                     SSP1ADD         equ	530	;# 
   423     0213                     SSPMSK          equ	531	;# 
   424     0213                     SSP1MSK         equ	531	;# 
   425     0214                     SSPSTAT         equ	532	;# 
   426     0214                     SSP1STAT        equ	532	;# 
   427     0215                     SSPCON1         equ	533	;# 
   428     0215                     SSP1CON         equ	533	;# 
   429     0215                     SSPCON          equ	533	;# 
   430     0216                     SSPCON2         equ	534	;# 
   431     0216                     SSP1CON2        equ	534	;# 
   432     0217                     SSPCON3         equ	535	;# 
   433     0217                     SSP1CON3        equ	535	;# 
   434     028C                     ODCONA          equ	652	;# 
   435     028D                     ODCONB          equ	653	;# 
   436     028E                     ODCONC          equ	654	;# 
   437     0291                     CCPR1           equ	657	;# 
   438     0291                     CCPR1L          equ	657	;# 
   439     0292                     CCPR1H          equ	658	;# 
   440     0293                     CCP1CON         equ	659	;# 
   441     0298                     CCPR2           equ	664	;# 
   442     0298                     CCPR2L          equ	664	;# 
   443     0299                     CCPR2H          equ	665	;# 
   444     029A                     CCP2CON         equ	666	;# 
   445     030C                     SLRCONA         equ	780	;# 
   446     030D                     SLRCONB         equ	781	;# 
   447     030E                     SLRCONC         equ	782	;# 
   448     038C                     INLVLA          equ	908	;# 
   449     038D                     INLVLB          equ	909	;# 
   450     038E                     INLVLC          equ	910	;# 
   451     0390                     INLVLE          equ	912	;# 
   452     0391                     IOCAP           equ	913	;# 
   453     0392                     IOCAN           equ	914	;# 
   454     0393                     IOCAF           equ	915	;# 
   455     0394                     IOCBP           equ	916	;# 
   456     0395                     IOCBN           equ	917	;# 
   457     0396                     IOCBF           equ	918	;# 
   458     0397                     IOCCP           equ	919	;# 
   459     0398                     IOCCN           equ	920	;# 
   460     0399                     IOCCF           equ	921	;# 
   461     039D                     IOCEP           equ	925	;# 
   462     039E                     IOCEN           equ	926	;# 
   463     039F                     IOCEF           equ	927	;# 
   464     0511                     OPA1CON         equ	1297	;# 
   465     0513                     OPA2CON         equ	1299	;# 
   466     051A                     CLKRCON         equ	1306	;# 
   467     0811                     PSMC1CON        equ	2065	;# 
   468     0812                     PSMC1MDL        equ	2066	;# 
   469     0813                     PSMC1SYNC       equ	2067	;# 
   470     0814                     PSMC1CLK        equ	2068	;# 
   471     0815                     PSMC1OEN        equ	2069	;# 
   472     0816                     PSMC1POL        equ	2070	;# 
   473     0817                     PSMC1BLNK       equ	2071	;# 
   474     0818                     PSMC1REBS       equ	2072	;# 
   475     0819                     PSMC1FEBS       equ	2073	;# 
   476     081A                     PSMC1PHS        equ	2074	;# 
   477     081B                     PSMC1DCS        equ	2075	;# 
   478     081C                     PSMC1PRS        equ	2076	;# 
   479     081D                     PSMC1ASDC       equ	2077	;# 
   480     081E                     PSMC1ASDL       equ	2078	;# 
   481     081F                     PSMC1ASDS       equ	2079	;# 
   482     0820                     PSMC1INT        equ	2080	;# 
   483     0821                     PSMC1PH         equ	2081	;# 
   484     0821                     PSMC1PHL        equ	2081	;# 
   485     0822                     PSMC1PHH        equ	2082	;# 
   486     0823                     PSMC1DC         equ	2083	;# 
   487     0823                     PSMC1DCL        equ	2083	;# 
   488     0824                     PSMC1DCH        equ	2084	;# 
   489     0825                     PSMC1PR         equ	2085	;# 
   490     0825                     PSMC1PRL        equ	2085	;# 
   491     0826                     PSMC1PRH        equ	2086	;# 
   492     0827                     PSMC1TMR        equ	2087	;# 
   493     0827                     PSMC1TMRL       equ	2087	;# 
   494     0828                     PSMC1TMRH       equ	2088	;# 
   495     0829                     PSMC1DBR        equ	2089	;# 
   496     082A                     PSMC1DBF        equ	2090	;# 
   497     082B                     PSMC1BLKR       equ	2091	;# 
   498     082C                     PSMC1BLKF       equ	2092	;# 
   499     082D                     PSMC1FFA        equ	2093	;# 
   500     082E                     PSMC1STR0       equ	2094	;# 
   501     082F                     PSMC1STR1       equ	2095	;# 
   502     0831                     PSMC2CON        equ	2097	;# 
   503     0832                     PSMC2MDL        equ	2098	;# 
   504     0833                     PSMC2SYNC       equ	2099	;# 
   505     0834                     PSMC2CLK        equ	2100	;# 
   506     0835                     PSMC2OEN        equ	2101	;# 
   507     0836                     PSMC2POL        equ	2102	;# 
   508     0837                     PSMC2BLNK       equ	2103	;# 
   509     0838                     PSMC2REBS       equ	2104	;# 
   510     0839                     PSMC2FEBS       equ	2105	;# 
   511     083A                     PSMC2PHS        equ	2106	;# 
   512     083B                     PSMC2DCS        equ	2107	;# 
   513     083C                     PSMC2PRS        equ	2108	;# 
   514     083D                     PSMC2ASDC       equ	2109	;# 
   515     083E                     PSMC2ASDL       equ	2110	;# 
   516     083F                     PSMC2ASDS       equ	2111	;# 
   517     0840                     PSMC2INT        equ	2112	;# 
   518     0841                     PSMC2PH         equ	2113	;# 
   519     0841                     PSMC2PHL        equ	2113	;# 
   520     0842                     PSMC2PHH        equ	2114	;# 
   521     0843                     PSMC2DC         equ	2115	;# 
   522     0843                     PSMC2DCL        equ	2115	;# 
   523     0844                     PSMC2DCH        equ	2116	;# 
   524     0845                     PSMC2PR         equ	2117	;# 
   525     0845                     PSMC2PRL        equ	2117	;# 
   526     0846                     PSMC2PRH        equ	2118	;# 
   527     0847                     PSMC2TMR        equ	2119	;# 
   528     0847                     PSMC2TMRL       equ	2119	;# 
   529     0848                     PSMC2TMRH       equ	2120	;# 
   530     0849                     PSMC2DBR        equ	2121	;# 
   531     084A                     PSMC2DBF        equ	2122	;# 
   532     084B                     PSMC2BLKR       equ	2123	;# 
   533     084C                     PSMC2BLKF       equ	2124	;# 
   534     084D                     PSMC2FFA        equ	2125	;# 
   535     084E                     PSMC2STR0       equ	2126	;# 
   536     084F                     PSMC2STR1       equ	2127	;# 
   537     0FE4                     STATUS_SHAD     equ	4068	;# 
   538     0FE5                     WREG_SHAD       equ	4069	;# 
   539     0FE6                     BSR_SHAD        equ	4070	;# 
   540     0FE7                     PCLATH_SHAD     equ	4071	;# 
   541     0FE8                     FSR0L_SHAD      equ	4072	;# 
   542     0FE9                     FSR0H_SHAD      equ	4073	;# 
   543     0FEA                     FSR1L_SHAD      equ	4074	;# 
   544     0FEB                     FSR1H_SHAD      equ	4075	;# 
   545     0FED                     STKPTR          equ	4077	;# 
   546     0FEE                     TOSL            equ	4078	;# 
   547     0FEF                     TOSH            equ	4079	;# 
   548     0000                     INDF0           equ	0	;# 
   549     0001                     INDF1           equ	1	;# 
   550     0002                     PCL             equ	2	;# 
   551     0003                     STATUS          equ	3	;# 
   552     0004                     FSR0L           equ	4	;# 
   553     0005                     FSR0H           equ	5	;# 
   554     0006                     FSR1L           equ	6	;# 
   555     0007                     FSR1H           equ	7	;# 
   556     0008                     BSR             equ	8	;# 
   557     0009                     WREG            equ	9	;# 
   558     000A                     PCLATH          equ	10	;# 
   559     000B                     INTCON          equ	11	;# 
   560     000C                     PORTA           equ	12	;# 
   561     000D                     PORTB           equ	13	;# 
   562     000E                     PORTC           equ	14	;# 
   563     0010                     PORTE           equ	16	;# 
   564     0011                     PIR1            equ	17	;# 
   565     0012                     PIR2            equ	18	;# 
   566     0014                     PIR4            equ	20	;# 
   567     0015                     TMR0            equ	21	;# 
   568     0016                     TMR1            equ	22	;# 
   569     0016                     TMR1L           equ	22	;# 
   570     0017                     TMR1H           equ	23	;# 
   571     0018                     T1CON           equ	24	;# 
   572     0019                     T1GCON          equ	25	;# 
   573     001A                     TMR2            equ	26	;# 
   574     001B                     PR2             equ	27	;# 
   575     001C                     T2CON           equ	28	;# 
   576     008C                     TRISA           equ	140	;# 
   577     008D                     TRISB           equ	141	;# 
   578     008E                     TRISC           equ	142	;# 
   579     0090                     TRISE           equ	144	;# 
   580     0091                     PIE1            equ	145	;# 
   581     0092                     PIE2            equ	146	;# 
   582     0094                     PIE4            equ	148	;# 
   583     0095                     OPTION_REG      equ	149	;# 
   584     0096                     PCON            equ	150	;# 
   585     0097                     WDTCON          equ	151	;# 
   586     0098                     OSCTUNE         equ	152	;# 
   587     0099                     OSCCON          equ	153	;# 
   588     009A                     OSCSTAT         equ	154	;# 
   589     009B                     ADRES           equ	155	;# 
   590     009B                     ADRESL          equ	155	;# 
   591     009C                     ADRESH          equ	156	;# 
   592     009D                     ADCON0          equ	157	;# 
   593     009E                     ADCON1          equ	158	;# 
   594     009F                     ADCON2          equ	159	;# 
   595     010C                     LATA            equ	268	;# 
   596     010D                     LATB            equ	269	;# 
   597     010E                     LATC            equ	270	;# 
   598     0111                     CM1CON0         equ	273	;# 
   599     0112                     CM1CON1         equ	274	;# 
   600     0113                     CM2CON0         equ	275	;# 
   601     0114                     CM2CON1         equ	276	;# 
   602     0115                     CMOUT           equ	277	;# 
   603     0116                     BORCON          equ	278	;# 
   604     0117                     FVRCON          equ	279	;# 
   605     0118                     DACCON0         equ	280	;# 
   606     0119                     DACCON1         equ	281	;# 
   607     011D                     APFCON          equ	285	;# 
   608     011D                     APFCON0         equ	285	;# 
   609     011E                     CM3CON0         equ	286	;# 
   610     011F                     CM3CON1         equ	287	;# 
   611     018C                     ANSELA          equ	396	;# 
   612     018D                     ANSELB          equ	397	;# 
   613     0191                     EEADR           equ	401	;# 
   614     0191                     EEADRL          equ	401	;# 
   615     0192                     EEADRH          equ	402	;# 
   616     0193                     EEDAT           equ	403	;# 
   617     0193                     EEDATL          equ	403	;# 
   618     0193                     EEDATA          equ	403	;# 
   619     0194                     EEDATH          equ	404	;# 
   620     0195                     EECON1          equ	405	;# 
   621     0196                     EECON2          equ	406	;# 
   622     0197                     VREGCON         equ	407	;# 
   623     0199                     RC1REG          equ	409	;# 
   624     0199                     RCREG           equ	409	;# 
   625     0199                     RCREG1          equ	409	;# 
   626     019A                     TX1REG          equ	410	;# 
   627     019A                     TXREG1          equ	410	;# 
   628     019A                     TXREG           equ	410	;# 
   629     019B                     SP1BRG          equ	411	;# 
   630     019B                     SPBRG           equ	411	;# 
   631     019B                     SP1BRGL         equ	411	;# 
   632     019B                     SPBRG1          equ	411	;# 
   633     019B                     SPBRGL          equ	411	;# 
   634     019C                     SP1BRGH         equ	412	;# 
   635     019C                     SPBRGH          equ	412	;# 
   636     019C                     SPBRGH1         equ	412	;# 
   637     019D                     RC1STA          equ	413	;# 
   638     019D                     RCSTA1          equ	413	;# 
   639     019D                     RCSTA           equ	413	;# 
   640     019E                     TX1STA          equ	414	;# 
   641     019E                     TXSTA1          equ	414	;# 
   642     019E                     TXSTA           equ	414	;# 
   643     019F                     BAUD1CON        equ	415	;# 
   644     019F                     BAUDCON1        equ	415	;# 
   645     019F                     BAUDCTL1        equ	415	;# 
   646     019F                     BAUDCON         equ	415	;# 
   647     019F                     BAUDCTL         equ	415	;# 
   648     020C                     WPUA            equ	524	;# 
   649     020D                     WPUB            equ	525	;# 
   650     020E                     WPUC            equ	526	;# 
   651     0210                     WPUE            equ	528	;# 
   652     0211                     SSPBUF          equ	529	;# 
   653     0211                     SSP1BUF         equ	529	;# 
   654     0212                     SSPADD          equ	530	;# 
   655     0212                     SSP1ADD         equ	530	;# 
   656     0213                     SSPMSK          equ	531	;# 
   657     0213                     SSP1MSK         equ	531	;# 
   658     0214                     SSPSTAT         equ	532	;# 
   659     0214                     SSP1STAT        equ	532	;# 
   660     0215                     SSPCON1         equ	533	;# 
   661     0215                     SSP1CON         equ	533	;# 
   662     0215                     SSPCON          equ	533	;# 
   663     0216                     SSPCON2         equ	534	;# 
   664     0216                     SSP1CON2        equ	534	;# 
   665     0217                     SSPCON3         equ	535	;# 
   666     0217                     SSP1CON3        equ	535	;# 
   667     028C                     ODCONA          equ	652	;# 
   668     028D                     ODCONB          equ	653	;# 
   669     028E                     ODCONC          equ	654	;# 
   670     0291                     CCPR1           equ	657	;# 
   671     0291                     CCPR1L          equ	657	;# 
   672     0292                     CCPR1H          equ	658	;# 
   673     0293                     CCP1CON         equ	659	;# 
   674     0298                     CCPR2           equ	664	;# 
   675     0298                     CCPR2L          equ	664	;# 
   676     0299                     CCPR2H          equ	665	;# 
   677     029A                     CCP2CON         equ	666	;# 
   678     030C                     SLRCONA         equ	780	;# 
   679     030D                     SLRCONB         equ	781	;# 
   680     030E                     SLRCONC         equ	782	;# 
   681     038C                     INLVLA          equ	908	;# 
   682     038D                     INLVLB          equ	909	;# 
   683     038E                     INLVLC          equ	910	;# 
   684     0390                     INLVLE          equ	912	;# 
   685     0391                     IOCAP           equ	913	;# 
   686     0392                     IOCAN           equ	914	;# 
   687     0393                     IOCAF           equ	915	;# 
   688     0394                     IOCBP           equ	916	;# 
   689     0395                     IOCBN           equ	917	;# 
   690     0396                     IOCBF           equ	918	;# 
   691     0397                     IOCCP           equ	919	;# 
   692     0398                     IOCCN           equ	920	;# 
   693     0399                     IOCCF           equ	921	;# 
   694     039D                     IOCEP           equ	925	;# 
   695     039E                     IOCEN           equ	926	;# 
   696     039F                     IOCEF           equ	927	;# 
   697     0511                     OPA1CON         equ	1297	;# 
   698     0513                     OPA2CON         equ	1299	;# 
   699     051A                     CLKRCON         equ	1306	;# 
   700     0811                     PSMC1CON        equ	2065	;# 
   701     0812                     PSMC1MDL        equ	2066	;# 
   702     0813                     PSMC1SYNC       equ	2067	;# 
   703     0814                     PSMC1CLK        equ	2068	;# 
   704     0815                     PSMC1OEN        equ	2069	;# 
   705     0816                     PSMC1POL        equ	2070	;# 
   706     0817                     PSMC1BLNK       equ	2071	;# 
   707     0818                     PSMC1REBS       equ	2072	;# 
   708     0819                     PSMC1FEBS       equ	2073	;# 
   709     081A                     PSMC1PHS        equ	2074	;# 
   710     081B                     PSMC1DCS        equ	2075	;# 
   711     081C                     PSMC1PRS        equ	2076	;# 
   712     081D                     PSMC1ASDC       equ	2077	;# 
   713     081E                     PSMC1ASDL       equ	2078	;# 
   714     081F                     PSMC1ASDS       equ	2079	;# 
   715     0820                     PSMC1INT        equ	2080	;# 
   716     0821                     PSMC1PH         equ	2081	;# 
   717     0821                     PSMC1PHL        equ	2081	;# 
   718     0822                     PSMC1PHH        equ	2082	;# 
   719     0823                     PSMC1DC         equ	2083	;# 
   720     0823                     PSMC1DCL        equ	2083	;# 
   721     0824                     PSMC1DCH        equ	2084	;# 
   722     0825                     PSMC1PR         equ	2085	;# 
   723     0825                     PSMC1PRL        equ	2085	;# 
   724     0826                     PSMC1PRH        equ	2086	;# 
   725     0827                     PSMC1TMR        equ	2087	;# 
   726     0827                     PSMC1TMRL       equ	2087	;# 
   727     0828                     PSMC1TMRH       equ	2088	;# 
   728     0829                     PSMC1DBR        equ	2089	;# 
   729     082A                     PSMC1DBF        equ	2090	;# 
   730     082B                     PSMC1BLKR       equ	2091	;# 
   731     082C                     PSMC1BLKF       equ	2092	;# 
   732     082D                     PSMC1FFA        equ	2093	;# 
   733     082E                     PSMC1STR0       equ	2094	;# 
   734     082F                     PSMC1STR1       equ	2095	;# 
   735     0831                     PSMC2CON        equ	2097	;# 
   736     0832                     PSMC2MDL        equ	2098	;# 
   737     0833                     PSMC2SYNC       equ	2099	;# 
   738     0834                     PSMC2CLK        equ	2100	;# 
   739     0835                     PSMC2OEN        equ	2101	;# 
   740     0836                     PSMC2POL        equ	2102	;# 
   741     0837                     PSMC2BLNK       equ	2103	;# 
   742     0838                     PSMC2REBS       equ	2104	;# 
   743     0839                     PSMC2FEBS       equ	2105	;# 
   744     083A                     PSMC2PHS        equ	2106	;# 
   745     083B                     PSMC2DCS        equ	2107	;# 
   746     083C                     PSMC2PRS        equ	2108	;# 
   747     083D                     PSMC2ASDC       equ	2109	;# 
   748     083E                     PSMC2ASDL       equ	2110	;# 
   749     083F                     PSMC2ASDS       equ	2111	;# 
   750     0840                     PSMC2INT        equ	2112	;# 
   751     0841                     PSMC2PH         equ	2113	;# 
   752     0841                     PSMC2PHL        equ	2113	;# 
   753     0842                     PSMC2PHH        equ	2114	;# 
   754     0843                     PSMC2DC         equ	2115	;# 
   755     0843                     PSMC2DCL        equ	2115	;# 
   756     0844                     PSMC2DCH        equ	2116	;# 
   757     0845                     PSMC2PR         equ	2117	;# 
   758     0845                     PSMC2PRL        equ	2117	;# 
   759     0846                     PSMC2PRH        equ	2118	;# 
   760     0847                     PSMC2TMR        equ	2119	;# 
   761     0847                     PSMC2TMRL       equ	2119	;# 
   762     0848                     PSMC2TMRH       equ	2120	;# 
   763     0849                     PSMC2DBR        equ	2121	;# 
   764     084A                     PSMC2DBF        equ	2122	;# 
   765     084B                     PSMC2BLKR       equ	2123	;# 
   766     084C                     PSMC2BLKF       equ	2124	;# 
   767     084D                     PSMC2FFA        equ	2125	;# 
   768     084E                     PSMC2STR0       equ	2126	;# 
   769     084F                     PSMC2STR1       equ	2127	;# 
   770     0FE4                     STATUS_SHAD     equ	4068	;# 
   771     0FE5                     WREG_SHAD       equ	4069	;# 
   772     0FE6                     BSR_SHAD        equ	4070	;# 
   773     0FE7                     PCLATH_SHAD     equ	4071	;# 
   774     0FE8                     FSR0L_SHAD      equ	4072	;# 
   775     0FE9                     FSR0H_SHAD      equ	4073	;# 
   776     0FEA                     FSR1L_SHAD      equ	4074	;# 
   777     0FEB                     FSR1H_SHAD      equ	4075	;# 
   778     0FED                     STKPTR          equ	4077	;# 
   779     0FEE                     TOSL            equ	4078	;# 
   780     0FEF                     TOSH            equ	4079	;# 
   781     000C                     _PORTAbits      set	12
   782     008C                     _TRISAbits      set	140
   783     008E                     _TRISCbits      set	142
   784     008D                     _TRISBbits      set	141
   785     010E                     _LATCbits       set	270
   786     010D                     _LATBbits       set	269
   787     018C                     _ANSELAbits     set	396
   788     018D                     _ANSELBbits     set	397
   789                           
   790                           	psect	stringtext1
   791     0800                     __pstringtext1:
   792     0800                     STR_1:
   793     0800  3453               	retlw	83	;'S'
   794     0801  3474               	retlw	116	;'t'
   795     0802  3465               	retlw	101	;'e'
   796     0803  3470               	retlw	112	;'p'
   797     0804  3470               	retlw	112	;'p'
   798     0805  3465               	retlw	101	;'e'
   799     0806  3472               	retlw	114	;'r'
   800     0807  3420               	retlw	32	;' '
   801     0808  344D               	retlw	77	;'M'
   802     0809  346F               	retlw	111	;'o'
   803     080A  3474               	retlw	116	;'t'
   804     080B  346F               	retlw	111	;'o'
   805     080C  3472               	retlw	114	;'r'
   806     080D  3400               	retlw	0
   807                           
   808                           	psect	stringtext2
   809     0000                     __pstringtext2:
   810                           
   811                           	psect	cinit
   812     07FD                     start_initialization:	
   813                           ; #config settings
   814                           
   815     07FD                     __initialization:
   816     07FD                     end_of_initialization:	
   817                           ;End of C runtime variable initialization code
   818                           
   819     07FD                     __end_of__initialization:
   820     07FD  0020               	movlb	0
   821     07FE  3183  2B1B         	ljmp	_main	;jump to C main() function
   822                           
   823                           	psect	cstackCOMMON
   824     0070                     __pcstackCOMMON:
   825     0070                     ?_programInitialize:
   826     0070                     ?_programLoop:	
   827                           ; 1 bytes @ 0x0
   828                           
   829     0070                     ?_lcd_Initialize:	
   830                           ; 1 bytes @ 0x0
   831                           
   832     0070                     ?_smotor_Rest:	
   833                           ; 1 bytes @ 0x0
   834                           
   835     0070                     ?_smotor_MoveStep:	
   836                           ; 1 bytes @ 0x0
   837                           
   838     0070                     ?_memset:	
   839                           ; 1 bytes @ 0x0
   840                           
   841     0070                     ?_main:	
   842                           ; 1 bytes @ 0x0
   843                           
   844     0070                     ?_delay_x1o5us:	
   845                           ; 1 bytes @ 0x0
   846                           
   847     0070                     ?_lcd_DelaySetupTime:	
   848                           ; 1 bytes @ 0x0
   849                           
   850     0070                     ?_lcd_DelayPulse:	
   851                           ; 1 bytes @ 0x0
   852                           
   853     0070                     ?_lcd_EPulse:	
   854                           ; 1 bytes @ 0x0
   855                           
   856     0070                     ?_lcd_WriteData:	
   857                           ; 1 bytes @ 0x0
   858                           
   859     0070                     ?_lcd_PrintCmd:	
   860                           ; 1 bytes @ 0x0
   861                           
   862     0070                     ?_lcd_PrintChar:	
   863                           ; 1 bytes @ 0x0
   864                           
   865     0070                     ?___bmul:	
   866                           ; 1 bytes @ 0x0
   867                           
   868     0070                     ?_labs:	
   869                           ; 1 bytes @ 0x0
   870                           
   871     0070                     ?___aldiv:	
   872                           ; 4 bytes @ 0x0
   873                           
   874     0070                     delay_x1o5us@delay:	
   875                           ; 4 bytes @ 0x0
   876                           
   877     0070                     smotor_MoveStep@step:	
   878                           ; 1 bytes @ 0x0
   879                           
   880     0070                     ___bmul@multiplicand:	
   881                           ; 1 bytes @ 0x0
   882                           
   883     0070                     memset@dest:	
   884                           ; 1 bytes @ 0x0
   885                           
   886     0070                     ___aldiv@divisor:	
   887                           ; 1 bytes @ 0x0
   888                           
   889     0070                     labs@a:	
   890                           ; 4 bytes @ 0x0
   891                           
   892     0070                     ??_smotor_Rest:	
   893                           ; 4 bytes @ 0x0
   894                           
   895     0070                     ??_smotor_MoveStep:	
   896                           ; 1 bytes @ 0x0
   897                           
   898     0070                     ??_delay_x1o5us:	
   899                           ; 1 bytes @ 0x0
   900                           
   901                           
   902                           ; 1 bytes @ 0x0
   903     0070                     	ds	1
   904     0071                     delay_x1o5us@i:
   905     0071                     ___bmul@product:	
   906                           ; 1 bytes @ 0x1
   907                           
   908     0071                     memset@c:	
   909                           ; 1 bytes @ 0x1
   910                           
   911     0071                     ??___bmul:	
   912                           ; 2 bytes @ 0x1
   913                           
   914                           
   915                           ; 1 bytes @ 0x1
   916     0071                     	ds	1
   917     0072                     ?_delay_x24o25us:
   918     0072                     ___bmul@multiplier:	
   919                           ; 1 bytes @ 0x2
   920                           
   921     0072                     delay_x24o25us@delay:	
   922                           ; 1 bytes @ 0x2
   923                           
   924     0072                     ??_lcd_DelaySetupTime:	
   925                           ; 2 bytes @ 0x2
   926                           
   927     0072                     ??_lcd_DelayPulse:	
   928                           ; 1 bytes @ 0x2
   929                           
   930     0072                     ??_lcd_EPulse:	
   931                           ; 1 bytes @ 0x2
   932                           
   933     0072                     ??_lcd_WriteData:	
   934                           ; 1 bytes @ 0x2
   935                           
   936                           
   937                           ; 1 bytes @ 0x2
   938     0072                     	ds	1
   939     0073                     memset@n:
   940                           
   941                           ; 2 bytes @ 0x3
   942     0073                     	ds	1
   943     0074                     lcd_WriteData@data:
   944     0074                     delay_x24o25us@i:	
   945                           ; 1 bytes @ 0x4
   946                           
   947     0074                     ___aldiv@dividend:	
   948                           ; 2 bytes @ 0x4
   949                           
   950     0074                     ??_labs:	
   951                           ; 4 bytes @ 0x4
   952                           
   953     0074                     ??_delay_x24o25us:	
   954                           ; 1 bytes @ 0x4
   955                           
   956                           
   957                           ; 1 bytes @ 0x4
   958     0074                     	ds	1
   959     0075                     lcd_PrintCmd@command:
   960     0075                     lcd_PrintChar@character:	
   961                           ; 1 bytes @ 0x5
   962                           
   963     0075                     memset@p:	
   964                           ; 1 bytes @ 0x5
   965                           
   966     0075                     ??_memset:	
   967                           ; 1 bytes @ 0x5
   968                           
   969     0075                     ??_lcd_PrintCmd:	
   970                           ; 1 bytes @ 0x5
   971                           
   972     0075                     ??_lcd_PrintChar:	
   973                           ; 1 bytes @ 0x5
   974                           
   975                           
   976                           ; 1 bytes @ 0x5
   977     0075                     	ds	1
   978     0076                     ?_lcd_Goto:
   979     0076                     ?_lcd_PrintString:	
   980                           ; 1 bytes @ 0x6
   981                           
   982     0076                     ?_delay_ms:	
   983                           ; 1 bytes @ 0x6
   984                           
   985     0076                     lcd_Goto@x:	
   986                           ; 1 bytes @ 0x6
   987                           
   988     0076                     lcd_PrintString@string:	
   989                           ; 1 bytes @ 0x6
   990                           
   991     0076                     delay_ms@delay:	
   992                           ; 2 bytes @ 0x6
   993                           
   994                           
   995                           ; 4 bytes @ 0x6
   996     0076                     	ds	1
   997     0077                     lcd_Goto@y:
   998     0077                     ??_lcd_Goto:	
   999                           ; 1 bytes @ 0x7
  1000                           
  1001                           
  1002                           ; 1 bytes @ 0x7
  1003     0077                     	ds	1
  1004     0078                     ___aldiv@counter:
  1005     0078                     ??_lcd_PrintString:	
  1006                           ; 1 bytes @ 0x8
  1007                           
  1008     0078                     ??___aldiv:	
  1009                           ; 1 bytes @ 0x8
  1010                           
  1011                           
  1012                           ; 1 bytes @ 0x8
  1013     0078                     	ds	1
  1014     0079                     ___aldiv@sign:
  1015                           
  1016                           ; 1 bytes @ 0x9
  1017     0079                     	ds	1
  1018     007A                     delay_ms@i:
  1019     007A                     ___aldiv@quotient:	
  1020                           ; 4 bytes @ 0xA
  1021                           
  1022     007A                     ??_delay_ms:	
  1023                           ; 4 bytes @ 0xA
  1024                           
  1025                           
  1026                           ; 1 bytes @ 0xA
  1027     007A                     	ds	4
  1028     007E                     ??_programInitialize:
  1029     007E                     ??_programLoop:	
  1030                           ; 1 bytes @ 0xE
  1031                           
  1032     007E                     ??_lcd_Initialize:	
  1033                           ; 1 bytes @ 0xE
  1034                           
  1035     007E                     ??_main:	
  1036                           ; 1 bytes @ 0xE
  1037                           
  1038                           
  1039                           	psect	cstackBANK0
  1040     0020                     __pcstackBANK0:	
  1041                           ; 1 bytes @ 0xE
  1042                           
  1043     0020                     ?_lcd_PrintDigitInt32:
  1044     0020                     lcd_PrintDigitInt32@number:	
  1045                           ; 1 bytes @ 0x0
  1046                           
  1047                           
  1048                           ; 4 bytes @ 0x0
  1049     0020                     	ds	4
  1050     0024                     lcd_PrintDigitInt32@noDigit:
  1051                           
  1052                           ; 1 bytes @ 0x4
  1053     0024                     	ds	1
  1054     0025                     lcd_PrintDigitInt32@enSign:
  1055                           
  1056                           ; 1 bytes @ 0x5
  1057     0025                     	ds	1
  1058     0026                     lcd_PrintDigitInt32@enZero:
  1059                           
  1060                           ; 1 bytes @ 0x6
  1061     0026                     	ds	1
  1062     0027                     ??_lcd_PrintDigitInt32:
  1063                           
  1064                           ; 1 bytes @ 0x7
  1065     0027                     	ds	4
  1066     002B                     lcd_PrintDigitInt32@numberRevChar:
  1067                           
  1068                           ; 11 bytes @ 0xB
  1069     002B                     	ds	11
  1070     0036                     lcd_PrintDigitInt32@numberChar:
  1071                           
  1072                           ; 11 bytes @ 0x16
  1073     0036                     	ds	11
  1074     0041                     lcd_PrintDigitInt32@tempN:
  1075                           
  1076                           ; 4 bytes @ 0x21
  1077     0041                     	ds	4
  1078     0045                     lcd_PrintDigitInt32@tempC:
  1079                           
  1080                           ; 1 bytes @ 0x25
  1081     0045                     	ds	1
  1082     0046                     lcd_PrintDigitInt32@i2:
  1083                           
  1084                           ; 1 bytes @ 0x26
  1085     0046                     	ds	1
  1086     0047                     lcd_PrintDigitInt32@totalDigit:
  1087                           
  1088                           ; 1 bytes @ 0x27
  1089     0047                     	ds	1
  1090     0048                     lcd_PrintDigitInt32@i1:
  1091                           
  1092                           ; 1 bytes @ 0x28
  1093     0048                     	ds	1
  1094     0049                     programLoop@delay:
  1095                           
  1096                           ; 4 bytes @ 0x29
  1097     0049                     	ds	4
  1098     004D                     programLoop@angleStep:
  1099                           
  1100                           ; 4 bytes @ 0x2D
  1101     004D                     	ds	4
  1102     0051                     programLoop@stepMotor:
  1103                           
  1104                           ; 1 bytes @ 0x31
  1105     0051                     	ds	1
  1106                           
  1107                           	psect	maintext
  1108     031B                     __pmaintext:	
  1109 ;;
  1110 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1111 ;;
  1112 ;; *************** function _main *****************
  1113 ;; Defined at:
  1114 ;;		line 26 in file "main.c"
  1115 ;; Parameters:    Size  Location     Type
  1116 ;;		None
  1117 ;; Auto vars:     Size  Location     Type
  1118 ;;		None
  1119 ;; Return value:  Size  Location     Type
  1120 ;;                  1    wreg      void 
  1121 ;; Registers used:
  1122 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1123 ;; Tracked objects:
  1124 ;;		On entry : B1F/0
  1125 ;;		On exit  : 0/0
  1126 ;;		Unchanged: 0/0
  1127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1128 ;;      Params:         0       0       0       0       0       0       0
  1129 ;;      Locals:         0       0       0       0       0       0       0
  1130 ;;      Temps:          0       0       0       0       0       0       0
  1131 ;;      Totals:         0       0       0       0       0       0       0
  1132 ;;Total ram usage:        0 bytes
  1133 ;; Hardware stack levels required when called: 8
  1134 ;; This function calls:
  1135 ;;		_programInitialize
  1136 ;;		_programLoop
  1137 ;; This function is called by:
  1138 ;;		Startup code after reset
  1139 ;; This function uses a non-reentrant model
  1140 ;;
  1141                           
  1142     031B                     _main:	
  1143                           ;psect for function _main
  1144                           
  1145     031B                     l1491:	
  1146                           ;incstack = 0
  1147                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1148                           
  1149                           
  1150                           ;main.c: 27:     programInitialize();
  1151     031B  3184  2404  3183   	fcall	_programInitialize
  1152     031E                     l1493:
  1153                           
  1154                           ;main.c: 30:         programLoop();
  1155     031E  3186  269D  3183   	fcall	_programLoop
  1156     0321  2B1E               	goto	l1493
  1157     0322  3180  2802         	ljmp	start
  1158     0324                     __end_of_main:
  1159                           
  1160                           	psect	text1
  1161     069D                     __ptext1:	
  1162 ;; *************** function _programLoop *****************
  1163 ;; Defined at:
  1164 ;;		line 69 in file "program.c"
  1165 ;; Parameters:    Size  Location     Type
  1166 ;;		None
  1167 ;; Auto vars:     Size  Location     Type
  1168 ;;  angleStep       4   45[BANK0 ] long 
  1169 ;;  delay           4   41[BANK0 ] unsigned long 
  1170 ;;  stepMotor       1   49[BANK0 ] unsigned char 
  1171 ;;  direction       1    0        unsigned char 
  1172 ;; Return value:  Size  Location     Type
  1173 ;;                  1    wreg      void 
  1174 ;; Registers used:
  1175 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1176 ;; Tracked objects:
  1177 ;;		On entry : 0/0
  1178 ;;		On exit  : 0/0
  1179 ;;		Unchanged: 0/0
  1180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1181 ;;      Params:         0       0       0       0       0       0       0
  1182 ;;      Locals:         0       9       0       0       0       0       0
  1183 ;;      Temps:          0       0       0       0       0       0       0
  1184 ;;      Totals:         0       9       0       0       0       0       0
  1185 ;;Total ram usage:        9 bytes
  1186 ;; Hardware stack levels used: 1
  1187 ;; Hardware stack levels required when called: 7
  1188 ;; This function calls:
  1189 ;;		_delay_ms
  1190 ;;		_lcd_Goto
  1191 ;;		_lcd_PrintDigitInt32
  1192 ;;		_lcd_PrintString
  1193 ;;		_smotor_MoveStep
  1194 ;;		_smotor_Rest
  1195 ;; This function is called by:
  1196 ;;		_main
  1197 ;; This function uses a non-reentrant model
  1198 ;;
  1199                           
  1200     069D                     _programLoop:	
  1201                           ;psect for function _programLoop
  1202                           
  1203     069D                     l1389:	
  1204                           ;incstack = 0
  1205                           ; Regs used in _programLoop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1206                           
  1207                           
  1208                           ;program.c: 70:     lcd_Goto(0, 0);
  1209     069D  01F6               	clrf	lcd_Goto@x
  1210     069E  3000               	movlw	0
  1211     069F  3183  23BE  3186   	fcall	_lcd_Goto
  1212                           
  1213                           ;program.c: 71:     lcd_PrintString("Stepper Motor");
  1214     06A2  3000               	movlw	low (STR_1| (0+32768))
  1215     06A3  00F6               	movwf	lcd_PrintString@string
  1216     06A4  3088               	movlw	high (STR_1| (0+32768))
  1217     06A5  00F7               	movwf	lcd_PrintString@string+1
  1218     06A6  3183  2390  3186   	fcall	_lcd_PrintString
  1219                           
  1220                           ;program.c: 73:     lcd_Goto(1, 0);
  1221     06A9  01F6               	clrf	lcd_Goto@x
  1222     06AA  3001               	movlw	1
  1223     06AB  3183  23BE  3186   	fcall	_lcd_Goto
  1224     06AE                     l1391:
  1225                           
  1226                           ;program.c: 74:     lcd_PrintDigitInt32(0, 8, 1, 1);
  1227     06AE  3000               	movlw	0
  1228     06AF  0020               	movlb	0	; select bank0
  1229     06B0  00A3               	movwf	lcd_PrintDigitInt32@number+3
  1230     06B1  3000               	movlw	0
  1231     06B2  00A2               	movwf	lcd_PrintDigitInt32@number+2
  1232     06B3  3000               	movlw	0
  1233     06B4  00A1               	movwf	lcd_PrintDigitInt32@number+1
  1234     06B5  3000               	movlw	0
  1235     06B6  00A0               	movwf	lcd_PrintDigitInt32@number
  1236     06B7  3008               	movlw	8
  1237     06B8  00A4               	movwf	lcd_PrintDigitInt32@noDigit
  1238     06B9  01A5               	clrf	lcd_PrintDigitInt32@enSign
  1239     06BA  0AA5               	incf	lcd_PrintDigitInt32@enSign,f
  1240     06BB  01A6               	clrf	lcd_PrintDigitInt32@enZero
  1241     06BC  0AA6               	incf	lcd_PrintDigitInt32@enZero,f
  1242     06BD  3185  25C9  3186   	fcall	_lcd_PrintDigitInt32
  1243     06C0                     l1393:
  1244                           
  1245                           ;program.c: 76:     uint8_t stepMotor = 1;
  1246     06C0  3001               	movlw	1
  1247     06C1  0020               	movlb	0	; select bank0
  1248     06C2  00D1               	movwf	programLoop@stepMotor
  1249     06C3                     l1395:
  1250                           
  1251                           ;program.c: 77:     uint32_t delay = 10;
  1252     06C3  3000               	movlw	0
  1253     06C4  00CC               	movwf	programLoop@delay+3
  1254     06C5  3000               	movlw	0
  1255     06C6  00CB               	movwf	programLoop@delay+2
  1256     06C7  3000               	movlw	0
  1257     06C8  00CA               	movwf	programLoop@delay+1
  1258     06C9  300A               	movlw	10
  1259     06CA  00C9               	movwf	programLoop@delay
  1260     06CB                     l1397:
  1261                           
  1262                           ;program.c: 78:     int32_t angleStep = 0;
  1263     06CB  3000               	movlw	0
  1264     06CC  00D0               	movwf	programLoop@angleStep+3
  1265     06CD  3000               	movlw	0
  1266     06CE  00CF               	movwf	programLoop@angleStep+2
  1267     06CF  3000               	movlw	0
  1268     06D0  00CE               	movwf	programLoop@angleStep+1
  1269     06D1  3000               	movlw	0
  1270     06D2  00CD               	movwf	programLoop@angleStep
  1271     06D3                     l1399:
  1272     06D3  2F0F               	goto	l1421
  1273     06D4                     l1401:
  1274                           
  1275                           ;program.c: 84:             stepMotor++;
  1276     06D4  3001               	movlw	1
  1277     06D5  07D1               	addwf	programLoop@stepMotor,f
  1278     06D6                     l1403:
  1279                           
  1280                           ;program.c: 85:             if(stepMotor>8) stepMotor = 1;
  1281     06D6  3009               	movlw	9
  1282     06D7  0251               	subwf	programLoop@stepMotor,w
  1283     06D8  1C03               	skipc
  1284     06D9  2EDB               	goto	u791
  1285     06DA  2EDC               	goto	u790
  1286     06DB                     u791:
  1287     06DB  2EDE               	goto	l1407
  1288     06DC                     u790:
  1289     06DC                     l1405:
  1290     06DC  3001               	movlw	1
  1291     06DD  00D1               	movwf	programLoop@stepMotor
  1292     06DE                     l1407:
  1293                           
  1294                           ;program.c: 87:             smotor_MoveStep(stepMotor);
  1295     06DE  0851               	movf	programLoop@stepMotor,w
  1296     06DF  3184  2469  3186   	fcall	_smotor_MoveStep
  1297     06E2                     l1409:
  1298                           
  1299                           ;program.c: 89:             angleStep++;
  1300     06E2  3001               	movlw	1
  1301     06E3  0020               	movlb	0	; select bank0
  1302     06E4  07CD               	addwf	programLoop@angleStep,f
  1303     06E5  3000               	movlw	0
  1304     06E6  3DCE               	addwfc	programLoop@angleStep+1,f
  1305     06E7  3DCF               	addwfc	programLoop@angleStep+2,f
  1306     06E8  3DD0               	addwfc	programLoop@angleStep+3,f
  1307     06E9                     l1411:
  1308                           
  1309                           ;program.c: 91:             lcd_Goto(1, 0);
  1310     06E9  01F6               	clrf	lcd_Goto@x
  1311     06EA  3001               	movlw	1
  1312     06EB  3183  23BE  3186   	fcall	_lcd_Goto
  1313     06EE                     l1413:
  1314                           
  1315                           ;program.c: 92:             lcd_PrintDigitInt32(angleStep, 8, 1, 1);
  1316     06EE  0020               	movlb	0	; select bank0
  1317     06EF  0850               	movf	programLoop@angleStep+3,w
  1318     06F0  00A3               	movwf	lcd_PrintDigitInt32@number+3
  1319     06F1  084F               	movf	programLoop@angleStep+2,w
  1320     06F2  00A2               	movwf	lcd_PrintDigitInt32@number+2
  1321     06F3  084E               	movf	programLoop@angleStep+1,w
  1322     06F4  00A1               	movwf	lcd_PrintDigitInt32@number+1
  1323     06F5  084D               	movf	programLoop@angleStep,w
  1324     06F6  00A0               	movwf	lcd_PrintDigitInt32@number
  1325     06F7  3008               	movlw	8
  1326     06F8  00A4               	movwf	lcd_PrintDigitInt32@noDigit
  1327     06F9  01A5               	clrf	lcd_PrintDigitInt32@enSign
  1328     06FA  0AA5               	incf	lcd_PrintDigitInt32@enSign,f
  1329     06FB  01A6               	clrf	lcd_PrintDigitInt32@enZero
  1330     06FC  0AA6               	incf	lcd_PrintDigitInt32@enZero,f
  1331     06FD  3185  25C9  3186   	fcall	_lcd_PrintDigitInt32
  1332     0700                     l1415:
  1333                           
  1334                           ;program.c: 94:             delay_ms(delay);
  1335     0700  0020               	movlb	0	; select bank0
  1336     0701  084C               	movf	programLoop@delay+3,w
  1337     0702  00F9               	movwf	delay_ms@delay+3
  1338     0703  084B               	movf	programLoop@delay+2,w
  1339     0704  00F8               	movwf	delay_ms@delay+2
  1340     0705  084A               	movf	programLoop@delay+1,w
  1341     0706  00F7               	movwf	delay_ms@delay+1
  1342     0707  0849               	movf	programLoop@delay,w
  1343     0708  00F6               	movwf	delay_ms@delay
  1344     0709  3183  23DB  3186   	fcall	_delay_ms
  1345     070C                     l1417:
  1346     070C                     l1419:
  1347                           
  1348                           ;program.c: 98:             smotor_Rest();
  1349     070C  3183  2315  3186   	fcall	_smotor_Rest
  1350     070F                     l1421:
  1351                           
  1352                           ;program.c: 83:         while(!PORTAbits.RA4) {
  1353     070F  0020               	movlb	0	; select bank0
  1354     0710  1E0C               	btfss	12,4	;volatile
  1355     0711  2F13               	goto	u801
  1356     0712  2F14               	goto	u800
  1357     0713                     u801:
  1358     0713  2ED4               	goto	l1401
  1359     0714                     u800:
  1360     0714  2F51               	goto	l1441
  1361     0715                     l1423:
  1362                           
  1363                           ;program.c: 102:             stepMotor--;
  1364     0715  3001               	movlw	1
  1365     0716  02D1               	subwf	programLoop@stepMotor,f
  1366                           
  1367                           ;program.c: 103:             if(stepMotor<1) stepMotor = 8;
  1368     0717  0851               	movf	programLoop@stepMotor,w
  1369     0718  1D03               	btfss	3,2
  1370     0719  2F1B               	goto	u811
  1371     071A  2F1C               	goto	u810
  1372     071B                     u811:
  1373     071B  2F1E               	goto	l1427
  1374     071C                     u810:
  1375     071C                     l1425:
  1376     071C  3008               	movlw	8
  1377     071D  00D1               	movwf	programLoop@stepMotor
  1378     071E                     l1427:
  1379                           
  1380                           ;program.c: 105:             smotor_MoveStep(stepMotor);
  1381     071E  0851               	movf	programLoop@stepMotor,w
  1382     071F  3184  2469  3186   	fcall	_smotor_MoveStep
  1383     0722                     l1429:
  1384                           
  1385                           ;program.c: 107:             angleStep--;
  1386     0722  30FF               	movlw	255
  1387     0723  0020               	movlb	0	; select bank0
  1388     0724  07CD               	addwf	programLoop@angleStep,f
  1389     0725  30FF               	movlw	255
  1390     0726  3DCE               	addwfc	programLoop@angleStep+1,f
  1391     0727  30FF               	movlw	255
  1392     0728  3DCF               	addwfc	programLoop@angleStep+2,f
  1393     0729  30FF               	movlw	255
  1394     072A  3DD0               	addwfc	programLoop@angleStep+3,f
  1395     072B                     l1431:
  1396                           
  1397                           ;program.c: 109:             lcd_Goto(1, 0);
  1398     072B  01F6               	clrf	lcd_Goto@x
  1399     072C  3001               	movlw	1
  1400     072D  3183  23BE  3186   	fcall	_lcd_Goto
  1401     0730                     l1433:
  1402                           
  1403                           ;program.c: 110:             lcd_PrintDigitInt32(angleStep, 8, 1, 1);
  1404     0730  0020               	movlb	0	; select bank0
  1405     0731  0850               	movf	programLoop@angleStep+3,w
  1406     0732  00A3               	movwf	lcd_PrintDigitInt32@number+3
  1407     0733  084F               	movf	programLoop@angleStep+2,w
  1408     0734  00A2               	movwf	lcd_PrintDigitInt32@number+2
  1409     0735  084E               	movf	programLoop@angleStep+1,w
  1410     0736  00A1               	movwf	lcd_PrintDigitInt32@number+1
  1411     0737  084D               	movf	programLoop@angleStep,w
  1412     0738  00A0               	movwf	lcd_PrintDigitInt32@number
  1413     0739  3008               	movlw	8
  1414     073A  00A4               	movwf	lcd_PrintDigitInt32@noDigit
  1415     073B  01A5               	clrf	lcd_PrintDigitInt32@enSign
  1416     073C  0AA5               	incf	lcd_PrintDigitInt32@enSign,f
  1417     073D  01A6               	clrf	lcd_PrintDigitInt32@enZero
  1418     073E  0AA6               	incf	lcd_PrintDigitInt32@enZero,f
  1419     073F  3185  25C9  3186   	fcall	_lcd_PrintDigitInt32
  1420     0742                     l1435:
  1421                           
  1422                           ;program.c: 112:             delay_ms(delay);
  1423     0742  0020               	movlb	0	; select bank0
  1424     0743  084C               	movf	programLoop@delay+3,w
  1425     0744  00F9               	movwf	delay_ms@delay+3
  1426     0745  084B               	movf	programLoop@delay+2,w
  1427     0746  00F8               	movwf	delay_ms@delay+2
  1428     0747  084A               	movf	programLoop@delay+1,w
  1429     0748  00F7               	movwf	delay_ms@delay+1
  1430     0749  0849               	movf	programLoop@delay,w
  1431     074A  00F6               	movwf	delay_ms@delay
  1432     074B  3183  23DB  3186   	fcall	_delay_ms
  1433     074E                     l1437:
  1434     074E                     l1439:
  1435                           
  1436                           ;program.c: 116:             smotor_Rest();
  1437     074E  3183  2315  3186   	fcall	_smotor_Rest
  1438     0751                     l1441:
  1439                           
  1440                           ;program.c: 101:         while(!PORTAbits.RA3) {
  1441     0751  0020               	movlb	0	; select bank0
  1442     0752  1D8C               	btfss	12,3	;volatile
  1443     0753  2F55               	goto	u821
  1444     0754  2F56               	goto	u820
  1445     0755                     u821:
  1446     0755  2F15               	goto	l1423
  1447     0756                     u820:
  1448     0756                     l78:
  1449                           
  1450                           ;program.c: 119:         if(!PORTAbits.RA2) {
  1451     0756  190C               	btfsc	12,2	;volatile
  1452     0757  2F59               	goto	u831
  1453     0758  2F5A               	goto	u830
  1454     0759                     u831:
  1455     0759  2F0F               	goto	l1421
  1456     075A                     u830:
  1457     075A  2FA0               	goto	l1465
  1458     075B                     l1445:
  1459                           
  1460                           ;program.c: 121:                 stepMotor--;
  1461     075B  3001               	movlw	1
  1462     075C  0020               	movlb	0	; select bank0
  1463     075D  02D1               	subwf	programLoop@stepMotor,f
  1464                           
  1465                           ;program.c: 122:                 if(stepMotor<1) stepMotor = 8;
  1466     075E  0851               	movf	programLoop@stepMotor,w
  1467     075F  1D03               	btfss	3,2
  1468     0760  2F62               	goto	u841
  1469     0761  2F63               	goto	u840
  1470     0762                     u841:
  1471     0762  2F65               	goto	l1449
  1472     0763                     u840:
  1473     0763                     l1447:
  1474     0763  3008               	movlw	8
  1475     0764  00D1               	movwf	programLoop@stepMotor
  1476     0765                     l1449:
  1477                           
  1478                           ;program.c: 124:                 smotor_MoveStep(stepMotor);
  1479     0765  0851               	movf	programLoop@stepMotor,w
  1480     0766  3184  2469  3186   	fcall	_smotor_MoveStep
  1481     0769                     l1451:
  1482                           
  1483                           ;program.c: 126:                 angleStep--;
  1484     0769  30FF               	movlw	255
  1485     076A  0020               	movlb	0	; select bank0
  1486     076B  07CD               	addwf	programLoop@angleStep,f
  1487     076C  30FF               	movlw	255
  1488     076D  3DCE               	addwfc	programLoop@angleStep+1,f
  1489     076E  30FF               	movlw	255
  1490     076F  3DCF               	addwfc	programLoop@angleStep+2,f
  1491     0770  30FF               	movlw	255
  1492     0771  3DD0               	addwfc	programLoop@angleStep+3,f
  1493     0772                     l1453:
  1494                           
  1495                           ;program.c: 128:                 delay_ms(delay);
  1496     0772  084C               	movf	programLoop@delay+3,w
  1497     0773  00F9               	movwf	delay_ms@delay+3
  1498     0774  084B               	movf	programLoop@delay+2,w
  1499     0775  00F8               	movwf	delay_ms@delay+2
  1500     0776  084A               	movf	programLoop@delay+1,w
  1501     0777  00F7               	movwf	delay_ms@delay+1
  1502     0778  0849               	movf	programLoop@delay,w
  1503     0779  00F6               	movwf	delay_ms@delay
  1504     077A  3183  23DB  3186   	fcall	_delay_ms
  1505     077D                     l1455:
  1506                           
  1507                           ;program.c: 130:                 lcd_Goto(1, 0);
  1508     077D  01F6               	clrf	lcd_Goto@x
  1509     077E  3001               	movlw	1
  1510     077F  3183  23BE  3186   	fcall	_lcd_Goto
  1511     0782                     l1457:
  1512                           
  1513                           ;program.c: 131:                 lcd_PrintDigitInt32(angleStep, 8, 1, 1);
  1514     0782  0020               	movlb	0	; select bank0
  1515     0783  0850               	movf	programLoop@angleStep+3,w
  1516     0784  00A3               	movwf	lcd_PrintDigitInt32@number+3
  1517     0785  084F               	movf	programLoop@angleStep+2,w
  1518     0786  00A2               	movwf	lcd_PrintDigitInt32@number+2
  1519     0787  084E               	movf	programLoop@angleStep+1,w
  1520     0788  00A1               	movwf	lcd_PrintDigitInt32@number+1
  1521     0789  084D               	movf	programLoop@angleStep,w
  1522     078A  00A0               	movwf	lcd_PrintDigitInt32@number
  1523     078B  3008               	movlw	8
  1524     078C  00A4               	movwf	lcd_PrintDigitInt32@noDigit
  1525     078D  01A5               	clrf	lcd_PrintDigitInt32@enSign
  1526     078E  0AA5               	incf	lcd_PrintDigitInt32@enSign,f
  1527     078F  01A6               	clrf	lcd_PrintDigitInt32@enZero
  1528     0790  0AA6               	incf	lcd_PrintDigitInt32@enZero,f
  1529     0791  3185  25C9  3186   	fcall	_lcd_PrintDigitInt32
  1530     0794                     l1459:
  1531                           
  1532                           ;program.c: 133:                 if(angleStep==0) direction = 0;
  1533     0794  0020               	movlb	0	; select bank0
  1534     0795  0850               	movf	programLoop@angleStep+3,w
  1535     0796  044F               	iorwf	programLoop@angleStep+2,w
  1536     0797  044E               	iorwf	programLoop@angleStep+1,w
  1537     0798  044D               	iorwf	programLoop@angleStep,w
  1538     0799  1D03               	skipz
  1539     079A  2F9C               	goto	u851
  1540     079B  2F9D               	goto	u850
  1541     079C                     u851:
  1542     079C  2F9D               	goto	l1463
  1543     079D                     u850:
  1544     079D                     l1461:
  1545     079D                     l1463:
  1546                           
  1547                           ;program.c: 135:                 smotor_Rest();
  1548     079D  3183  2315  3186   	fcall	_smotor_Rest
  1549     07A0                     l1465:
  1550                           
  1551                           ;program.c: 120:             while(angleStep>0) {
  1552     07A0  0020               	movlb	0	; select bank0
  1553     07A1  1BD0               	btfsc	programLoop@angleStep+3,7
  1554     07A2  2FB2               	goto	u860
  1555     07A3  0850               	movf	programLoop@angleStep+3,w
  1556     07A4  1D03               	btfss	3,2
  1557     07A5  2FB1               	goto	u861
  1558     07A6  084F               	movf	programLoop@angleStep+2,w
  1559     07A7  1D03               	btfss	3,2
  1560     07A8  2FB1               	goto	u861
  1561     07A9  084E               	movf	programLoop@angleStep+1,w
  1562     07AA  1D03               	btfss	3,2
  1563     07AB  2FB1               	goto	u861
  1564     07AC  3001               	movlw	1
  1565     07AD  024D               	subwf	programLoop@angleStep,w
  1566     07AE  1803               	btfsc	3,0
  1567     07AF  2FB1               	goto	u861
  1568     07B0  2FB2               	goto	u860
  1569     07B1                     u861:
  1570     07B1  2F5B               	goto	l1445
  1571     07B2                     u860:
  1572     07B2  2FF6               	goto	l1489
  1573     07B3                     l1467:
  1574                           
  1575                           ;program.c: 139:                 stepMotor++;
  1576     07B3  3001               	movlw	1
  1577     07B4  07D1               	addwf	programLoop@stepMotor,f
  1578     07B5                     l1469:
  1579                           
  1580                           ;program.c: 140:                 if(stepMotor>8) stepMotor = 1;
  1581     07B5  3009               	movlw	9
  1582     07B6  0251               	subwf	programLoop@stepMotor,w
  1583     07B7  1C03               	skipc
  1584     07B8  2FBA               	goto	u871
  1585     07B9  2FBB               	goto	u870
  1586     07BA                     u871:
  1587     07BA  2FBD               	goto	l1473
  1588     07BB                     u870:
  1589     07BB                     l1471:
  1590     07BB  3001               	movlw	1
  1591     07BC  00D1               	movwf	programLoop@stepMotor
  1592     07BD                     l1473:
  1593                           
  1594                           ;program.c: 142:                 smotor_MoveStep(stepMotor);
  1595     07BD  0851               	movf	programLoop@stepMotor,w
  1596     07BE  3184  2469  3186   	fcall	_smotor_MoveStep
  1597     07C1                     l1475:
  1598                           
  1599                           ;program.c: 144:                 angleStep++;
  1600     07C1  3001               	movlw	1
  1601     07C2  0020               	movlb	0	; select bank0
  1602     07C3  07CD               	addwf	programLoop@angleStep,f
  1603     07C4  3000               	movlw	0
  1604     07C5  3DCE               	addwfc	programLoop@angleStep+1,f
  1605     07C6  3DCF               	addwfc	programLoop@angleStep+2,f
  1606     07C7  3DD0               	addwfc	programLoop@angleStep+3,f
  1607     07C8                     l1477:
  1608                           
  1609                           ;program.c: 146:                 delay_ms(delay);
  1610     07C8  084C               	movf	programLoop@delay+3,w
  1611     07C9  00F9               	movwf	delay_ms@delay+3
  1612     07CA  084B               	movf	programLoop@delay+2,w
  1613     07CB  00F8               	movwf	delay_ms@delay+2
  1614     07CC  084A               	movf	programLoop@delay+1,w
  1615     07CD  00F7               	movwf	delay_ms@delay+1
  1616     07CE  0849               	movf	programLoop@delay,w
  1617     07CF  00F6               	movwf	delay_ms@delay
  1618     07D0  3183  23DB  3186   	fcall	_delay_ms
  1619     07D3                     l1479:
  1620                           
  1621                           ;program.c: 148:                 lcd_Goto(1, 0);
  1622     07D3  01F6               	clrf	lcd_Goto@x
  1623     07D4  3001               	movlw	1
  1624     07D5  3183  23BE  3186   	fcall	_lcd_Goto
  1625     07D8                     l1481:
  1626                           
  1627                           ;program.c: 149:                 lcd_PrintDigitInt32(angleStep, 8, 1, 1);
  1628     07D8  0020               	movlb	0	; select bank0
  1629     07D9  0850               	movf	programLoop@angleStep+3,w
  1630     07DA  00A3               	movwf	lcd_PrintDigitInt32@number+3
  1631     07DB  084F               	movf	programLoop@angleStep+2,w
  1632     07DC  00A2               	movwf	lcd_PrintDigitInt32@number+2
  1633     07DD  084E               	movf	programLoop@angleStep+1,w
  1634     07DE  00A1               	movwf	lcd_PrintDigitInt32@number+1
  1635     07DF  084D               	movf	programLoop@angleStep,w
  1636     07E0  00A0               	movwf	lcd_PrintDigitInt32@number
  1637     07E1  3008               	movlw	8
  1638     07E2  00A4               	movwf	lcd_PrintDigitInt32@noDigit
  1639     07E3  01A5               	clrf	lcd_PrintDigitInt32@enSign
  1640     07E4  0AA5               	incf	lcd_PrintDigitInt32@enSign,f
  1641     07E5  01A6               	clrf	lcd_PrintDigitInt32@enZero
  1642     07E6  0AA6               	incf	lcd_PrintDigitInt32@enZero,f
  1643     07E7  3185  25C9  3186   	fcall	_lcd_PrintDigitInt32
  1644     07EA                     l1483:
  1645                           
  1646                           ;program.c: 151:                 if(angleStep==0) direction = 0;
  1647     07EA  0020               	movlb	0	; select bank0
  1648     07EB  0850               	movf	programLoop@angleStep+3,w
  1649     07EC  044F               	iorwf	programLoop@angleStep+2,w
  1650     07ED  044E               	iorwf	programLoop@angleStep+1,w
  1651     07EE  044D               	iorwf	programLoop@angleStep,w
  1652     07EF  1D03               	skipz
  1653     07F0  2FF2               	goto	u881
  1654     07F1  2FF3               	goto	u880
  1655     07F2                     u881:
  1656     07F2  2FF3               	goto	l1487
  1657     07F3                     u880:
  1658     07F3                     l1485:
  1659     07F3                     l1487:
  1660                           
  1661                           ;program.c: 153:                 smotor_Rest();
  1662     07F3  3183  2315  3186   	fcall	_smotor_Rest
  1663     07F6                     l1489:
  1664                           
  1665                           ;program.c: 138:             while(angleStep<0) {
  1666     07F6  0020               	movlb	0	; select bank0
  1667     07F7  1BD0               	btfsc	programLoop@angleStep+3,7
  1668     07F8  2FFA               	goto	u891
  1669     07F9  2FFB               	goto	u890
  1670     07FA                     u891:
  1671     07FA  2FB3               	goto	l1467
  1672     07FB                     u890:
  1673     07FB  2F0F               	goto	l1421
  1674     07FC  0008               	return
  1675     07FD                     __end_of_programLoop:
  1676                           
  1677                           	psect	text2
  1678     0469                     __ptext2:	
  1679 ;; *************** function _smotor_MoveStep *****************
  1680 ;; Defined at:
  1681 ;;		line 350 in file "program.c"
  1682 ;; Parameters:    Size  Location     Type
  1683 ;;  step            1    wreg     unsigned char 
  1684 ;; Auto vars:     Size  Location     Type
  1685 ;;  step            1    0[COMMON] unsigned char 
  1686 ;; Return value:  Size  Location     Type
  1687 ;;                  1    wreg      void 
  1688 ;; Registers used:
  1689 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1690 ;; Tracked objects:
  1691 ;;		On entry : 0/0
  1692 ;;		On exit  : 0/0
  1693 ;;		Unchanged: 0/0
  1694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1695 ;;      Params:         0       0       0       0       0       0       0
  1696 ;;      Locals:         1       0       0       0       0       0       0
  1697 ;;      Temps:          0       0       0       0       0       0       0
  1698 ;;      Totals:         1       0       0       0       0       0       0
  1699 ;;Total ram usage:        1 bytes
  1700 ;; Hardware stack levels used: 1
  1701 ;; This function calls:
  1702 ;;		Nothing
  1703 ;; This function is called by:
  1704 ;;		_programLoop
  1705 ;; This function uses a non-reentrant model
  1706 ;;
  1707                           
  1708     0469                     _smotor_MoveStep:	
  1709                           ;psect for function _smotor_MoveStep
  1710                           
  1711                           
  1712                           ;incstack = 0
  1713                           ; Regs used in _smotor_MoveStep: [wreg-fsr0h+status,2+status,0]
  1714                           ;smotor_MoveStep@step stored from wreg
  1715     0469  00F0               	movwf	smotor_MoveStep@step
  1716     046A                     l1377:
  1717                           
  1718                           ;program.c: 351:     switch(step) {
  1719     046A  2C9B               	goto	l1381
  1720     046B                     l164:	
  1721                           ;program.c: 352:         case 1:
  1722                           
  1723                           
  1724                           ;program.c: 353:             LATCbits.LATC1 = 1;
  1725     046B  0022               	movlb	2	; select bank2
  1726     046C  148E               	bsf	14,1	;volatile
  1727                           
  1728                           ;program.c: 354:             LATBbits.LATB0 = 0;
  1729     046D  100D               	bcf	13,0	;volatile
  1730                           
  1731                           ;program.c: 355:             LATCbits.LATC4 = 0;
  1732     046E  120E               	bcf	14,4	;volatile
  1733                           
  1734                           ;program.c: 356:             LATCbits.LATC3 = 0;
  1735     046F  118E               	bcf	14,3	;volatile
  1736                           
  1737                           ;program.c: 357:             break;
  1738     0470  2CB5               	goto	l174
  1739     0471                     l166:	
  1740                           ;program.c: 359:         case 2:
  1741                           
  1742                           
  1743                           ;program.c: 360:             LATCbits.LATC1 = 1;
  1744     0471  0022               	movlb	2	; select bank2
  1745     0472  148E               	bsf	14,1	;volatile
  1746                           
  1747                           ;program.c: 361:             LATBbits.LATB0 = 0;
  1748     0473  100D               	bcf	13,0	;volatile
  1749                           
  1750                           ;program.c: 362:             LATCbits.LATC4 = 1;
  1751     0474  160E               	bsf	14,4	;volatile
  1752                           
  1753                           ;program.c: 363:             LATCbits.LATC3 = 0;
  1754     0475  118E               	bcf	14,3	;volatile
  1755                           
  1756                           ;program.c: 364:             break;
  1757     0476  2CB5               	goto	l174
  1758     0477                     l167:	
  1759                           ;program.c: 366:         case 3:
  1760                           
  1761                           
  1762                           ;program.c: 367:             LATCbits.LATC1 = 0;
  1763     0477  0022               	movlb	2	; select bank2
  1764     0478  108E               	bcf	14,1	;volatile
  1765                           
  1766                           ;program.c: 368:             LATBbits.LATB0 = 0;
  1767     0479  100D               	bcf	13,0	;volatile
  1768                           
  1769                           ;program.c: 369:             LATCbits.LATC4 = 1;
  1770     047A  160E               	bsf	14,4	;volatile
  1771                           
  1772                           ;program.c: 370:             LATCbits.LATC3 = 0;
  1773     047B  118E               	bcf	14,3	;volatile
  1774                           
  1775                           ;program.c: 371:             break;
  1776     047C  2CB5               	goto	l174
  1777     047D                     l168:	
  1778                           ;program.c: 373:         case 4:
  1779                           
  1780                           
  1781                           ;program.c: 374:             LATCbits.LATC1 = 0;
  1782     047D  0022               	movlb	2	; select bank2
  1783     047E  108E               	bcf	14,1	;volatile
  1784                           
  1785                           ;program.c: 375:             LATBbits.LATB0 = 1;
  1786     047F  140D               	bsf	13,0	;volatile
  1787                           
  1788                           ;program.c: 376:             LATCbits.LATC4 = 1;
  1789     0480  160E               	bsf	14,4	;volatile
  1790                           
  1791                           ;program.c: 377:             LATCbits.LATC3 = 0;
  1792     0481  118E               	bcf	14,3	;volatile
  1793                           
  1794                           ;program.c: 378:             break;
  1795     0482  2CB5               	goto	l174
  1796     0483                     l169:	
  1797                           ;program.c: 380:         case 5:
  1798                           
  1799                           
  1800                           ;program.c: 381:             LATCbits.LATC1 = 0;
  1801     0483  0022               	movlb	2	; select bank2
  1802     0484  108E               	bcf	14,1	;volatile
  1803                           
  1804                           ;program.c: 382:             LATBbits.LATB0 = 1;
  1805     0485  140D               	bsf	13,0	;volatile
  1806                           
  1807                           ;program.c: 383:             LATCbits.LATC4 = 0;
  1808     0486  120E               	bcf	14,4	;volatile
  1809                           
  1810                           ;program.c: 384:             LATCbits.LATC3 = 0;
  1811     0487  118E               	bcf	14,3	;volatile
  1812                           
  1813                           ;program.c: 385:             break;
  1814     0488  2CB5               	goto	l174
  1815     0489                     l170:	
  1816                           ;program.c: 387:         case 6:
  1817                           
  1818                           
  1819                           ;program.c: 388:             LATCbits.LATC1 = 0;
  1820     0489  0022               	movlb	2	; select bank2
  1821     048A  108E               	bcf	14,1	;volatile
  1822                           
  1823                           ;program.c: 389:             LATBbits.LATB0 = 1;
  1824     048B  140D               	bsf	13,0	;volatile
  1825                           
  1826                           ;program.c: 390:             LATCbits.LATC4 = 0;
  1827     048C  120E               	bcf	14,4	;volatile
  1828                           
  1829                           ;program.c: 391:             LATCbits.LATC3 = 1;
  1830     048D  158E               	bsf	14,3	;volatile
  1831                           
  1832                           ;program.c: 392:             break;
  1833     048E  2CB5               	goto	l174
  1834     048F                     l171:	
  1835                           ;program.c: 394:         case 7:
  1836                           
  1837                           
  1838                           ;program.c: 395:             LATCbits.LATC1 = 0;
  1839     048F  0022               	movlb	2	; select bank2
  1840     0490  108E               	bcf	14,1	;volatile
  1841                           
  1842                           ;program.c: 396:             LATBbits.LATB0 = 0;
  1843     0491  100D               	bcf	13,0	;volatile
  1844                           
  1845                           ;program.c: 397:             LATCbits.LATC4 = 0;
  1846     0492  120E               	bcf	14,4	;volatile
  1847                           
  1848                           ;program.c: 398:             LATCbits.LATC3 = 1;
  1849     0493  158E               	bsf	14,3	;volatile
  1850                           
  1851                           ;program.c: 399:             break;
  1852     0494  2CB5               	goto	l174
  1853     0495                     l172:	
  1854                           ;program.c: 401:         case 8:
  1855                           
  1856                           
  1857                           ;program.c: 402:             LATCbits.LATC1 = 1;
  1858     0495  0022               	movlb	2	; select bank2
  1859     0496  148E               	bsf	14,1	;volatile
  1860                           
  1861                           ;program.c: 403:             LATBbits.LATB0 = 0;
  1862     0497  100D               	bcf	13,0	;volatile
  1863                           
  1864                           ;program.c: 404:             LATCbits.LATC4 = 0;
  1865     0498  120E               	bcf	14,4	;volatile
  1866                           
  1867                           ;program.c: 405:             LATCbits.LATC3 = 1;
  1868     0499  158E               	bsf	14,3	;volatile
  1869                           
  1870                           ;program.c: 406:             break;
  1871     049A  2CB5               	goto	l174
  1872     049B                     l1381:
  1873     049B  0870               	movf	smotor_MoveStep@step,w
  1874                           
  1875                           ; Switch size 1, requested type "simple"
  1876                           ; Number of cases is 8, Range of values is 1 to 8
  1877                           ; switch strategies available:
  1878                           ; Name         Instructions Cycles
  1879                           ; direct_byte           25     9 (fixed)
  1880                           ; simple_byte           25    13 (average)
  1881                           ; jumptable            263     9 (fixed)
  1882                           ;	Chosen strategy is simple_byte
  1883     049C  3A01               	xorlw	1	; case 1
  1884     049D  1903               	skipnz
  1885     049E  2C6B               	goto	l164
  1886     049F  3A03               	xorlw	3	; case 2
  1887     04A0  1903               	skipnz
  1888     04A1  2C71               	goto	l166
  1889     04A2  3A01               	xorlw	1	; case 3
  1890     04A3  1903               	skipnz
  1891     04A4  2C77               	goto	l167
  1892     04A5  3A07               	xorlw	7	; case 4
  1893     04A6  1903               	skipnz
  1894     04A7  2C7D               	goto	l168
  1895     04A8  3A01               	xorlw	1	; case 5
  1896     04A9  1903               	skipnz
  1897     04AA  2C83               	goto	l169
  1898     04AB  3A03               	xorlw	3	; case 6
  1899     04AC  1903               	skipnz
  1900     04AD  2C89               	goto	l170
  1901     04AE  3A01               	xorlw	1	; case 7
  1902     04AF  1903               	skipnz
  1903     04B0  2C8F               	goto	l171
  1904     04B1  3A0F               	xorlw	15	; case 8
  1905     04B2  1903               	skipnz
  1906     04B3  2C95               	goto	l172
  1907     04B4  2CB5               	goto	l174
  1908     04B5                     l174:
  1909     04B5  0008               	return
  1910     04B6                     __end_of_smotor_MoveStep:
  1911                           
  1912                           	psect	text3
  1913     05C9                     __ptext3:	
  1914 ;; *************** function _lcd_PrintDigitInt32 *****************
  1915 ;; Defined at:
  1916 ;;		line 300 in file "program.c"
  1917 ;; Parameters:    Size  Location     Type
  1918 ;;  number          4    0[BANK0 ] long 
  1919 ;;  noDigit         1    4[BANK0 ] unsigned char 
  1920 ;;  enSign          1    5[BANK0 ] _Bool 
  1921 ;;  enZero          1    6[BANK0 ] _Bool 
  1922 ;; Auto vars:     Size  Location     Type
  1923 ;;  tempN           4   33[BANK0 ] long 
  1924 ;;  tempC           1   37[BANK0 ] unsigned char 
  1925 ;;  numberChar     11   22[BANK0 ] unsigned char [11]
  1926 ;;  numberRevCha   11   11[BANK0 ] unsigned char [11]
  1927 ;;  i1              1   40[BANK0 ] unsigned char 
  1928 ;;  totalDigit      1   39[BANK0 ] unsigned char 
  1929 ;;  i2              1   38[BANK0 ] unsigned char 
  1930 ;; Return value:  Size  Location     Type
  1931 ;;                  1    wreg      void 
  1932 ;; Registers used:
  1933 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1934 ;; Tracked objects:
  1935 ;;		On entry : 0/0
  1936 ;;		On exit  : 0/0
  1937 ;;		Unchanged: 0/0
  1938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1939 ;;      Params:         0       7       0       0       0       0       0
  1940 ;;      Locals:         0      30       0       0       0       0       0
  1941 ;;      Temps:          0       4       0       0       0       0       0
  1942 ;;      Totals:         0      41       0       0       0       0       0
  1943 ;;Total ram usage:       41 bytes
  1944 ;; Hardware stack levels used: 1
  1945 ;; Hardware stack levels required when called: 6
  1946 ;; This function calls:
  1947 ;;		___aldiv
  1948 ;;		___bmul
  1949 ;;		_labs
  1950 ;;		_lcd_PrintChar
  1951 ;;		_lcd_PrintString
  1952 ;;		_memset
  1953 ;; This function is called by:
  1954 ;;		_programLoop
  1955 ;; This function uses a non-reentrant model
  1956 ;;
  1957                           
  1958     05C9                     _lcd_PrintDigitInt32:	
  1959                           ;psect for function _lcd_PrintDigitInt32
  1960                           
  1961     05C9                     l1317:	
  1962                           ;incstack = 0
  1963                           ; Regs used in _lcd_PrintDigitInt32: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1964                           
  1965                           
  1966                           ;program.c: 301:     uint8_t i1 = 0,
  1967     05C9  0020               	movlb	0	; select bank0
  1968     05CA  01C8               	clrf	lcd_PrintDigitInt32@i1
  1969                           
  1970                           ;program.c: 303:             totalDigit = 0;
  1971     05CB  01C7               	clrf	lcd_PrintDigitInt32@totalDigit
  1972     05CC                     l1319:
  1973                           
  1974                           ;program.c: 305:     char numberRevChar[11];;program.c: 306:     char numberChar[11];;pr
      +                          ogram.c: 309:     memset(numberRevChar, 0, 11);
  1975     05CC  302B               	movlw	(low (lcd_PrintDigitInt32@numberRevChar| 0))& (0+255)
  1976     05CD  00F0               	movwf	memset@dest
  1977     05CE  3000               	movlw	0
  1978     05CF  00F1               	movwf	memset@c
  1979     05D0  00F2               	movwf	memset@c+1
  1980     05D1  300B               	movlw	11
  1981     05D2  00F3               	movwf	memset@n
  1982     05D3  3000               	movlw	0
  1983     05D4  00F4               	movwf	memset@n+1
  1984     05D5  3183  23A7  3185   	fcall	_memset
  1985     05D8                     l1321:
  1986                           
  1987                           ;program.c: 310:     memset(numberChar, 0, 11);
  1988     05D8  3036               	movlw	(low (lcd_PrintDigitInt32@numberChar| 0))& (0+255)
  1989     05D9  00F0               	movwf	memset@dest
  1990     05DA  3000               	movlw	0
  1991     05DB  00F1               	movwf	memset@c
  1992     05DC  00F2               	movwf	memset@c+1
  1993     05DD  300B               	movlw	11
  1994     05DE  00F3               	movwf	memset@n
  1995     05DF  3000               	movlw	0
  1996     05E0  00F4               	movwf	memset@n+1
  1997     05E1  3183  23A7  3185   	fcall	_memset
  1998     05E4                     l1323:
  1999                           
  2000                           ;program.c: 312:     if(number<0) {
  2001     05E4  0020               	movlb	0	; select bank0
  2002     05E5  1FA3               	btfss	lcd_PrintDigitInt32@number+3,7
  2003     05E6  2DE8               	goto	u721
  2004     05E7  2DE9               	goto	u720
  2005     05E8                     u721:
  2006     05E8  2E08               	goto	l1329
  2007     05E9                     u720:
  2008     05E9                     l1325:
  2009                           
  2010                           ;program.c: 313:         if(enSign) lcd_PrintChar('-');
  2011     05E9  0825               	movf	lcd_PrintDigitInt32@enSign,w
  2012     05EA  1903               	btfsc	3,2
  2013     05EB  2DED               	goto	u731
  2014     05EC  2DEE               	goto	u730
  2015     05ED                     u731:
  2016     05ED  2DF2               	goto	l145
  2017     05EE                     u730:
  2018     05EE                     l1327:
  2019     05EE  302D               	movlw	45
  2020     05EF  3183  233A  3185   	fcall	_lcd_PrintChar
  2021     05F2                     l145:
  2022                           
  2023                           ;program.c: 314:         number = labs(number);
  2024     05F2  0020               	movlb	0	; select bank0
  2025     05F3  0823               	movf	lcd_PrintDigitInt32@number+3,w
  2026     05F4  00F3               	movwf	labs@a+3
  2027     05F5  0822               	movf	lcd_PrintDigitInt32@number+2,w
  2028     05F6  00F2               	movwf	labs@a+2
  2029     05F7  0821               	movf	lcd_PrintDigitInt32@number+1,w
  2030     05F8  00F1               	movwf	labs@a+1
  2031     05F9  0820               	movf	lcd_PrintDigitInt32@number,w
  2032     05FA  00F0               	movwf	labs@a
  2033     05FB  3183  2365  3185   	fcall	_labs
  2034     05FE  0873               	movf	?_labs+3,w
  2035     05FF  0020               	movlb	0	; select bank0
  2036     0600  00A3               	movwf	lcd_PrintDigitInt32@number+3
  2037     0601  0872               	movf	?_labs+2,w
  2038     0602  00A2               	movwf	lcd_PrintDigitInt32@number+2
  2039     0603  0871               	movf	?_labs+1,w
  2040     0604  00A1               	movwf	lcd_PrintDigitInt32@number+1
  2041     0605  0870               	movf	?_labs,w
  2042     0606  00A0               	movwf	lcd_PrintDigitInt32@number
  2043                           
  2044                           ;program.c: 315:     } else {
  2045     0607  2E11               	goto	l1333
  2046     0608                     l1329:
  2047                           
  2048                           ;program.c: 316:         if(enSign) lcd_PrintChar(' ');
  2049     0608  0825               	movf	lcd_PrintDigitInt32@enSign,w
  2050     0609  1903               	btfsc	3,2
  2051     060A  2E0C               	goto	u741
  2052     060B  2E0D               	goto	u740
  2053     060C                     u741:
  2054     060C  2E11               	goto	l1333
  2055     060D                     u740:
  2056     060D                     l1331:
  2057     060D  3020               	movlw	32
  2058     060E  3183  233A  3185   	fcall	_lcd_PrintChar
  2059     0611                     l1333:
  2060                           
  2061                           ;program.c: 320:         int32_t tempN = number;
  2062     0611  0020               	movlb	0	; select bank0
  2063     0612  0823               	movf	lcd_PrintDigitInt32@number+3,w
  2064     0613  00C4               	movwf	lcd_PrintDigitInt32@tempN+3
  2065     0614  0822               	movf	lcd_PrintDigitInt32@number+2,w
  2066     0615  00C3               	movwf	lcd_PrintDigitInt32@tempN+2
  2067     0616  0821               	movf	lcd_PrintDigitInt32@number+1,w
  2068     0617  00C2               	movwf	lcd_PrintDigitInt32@tempN+1
  2069     0618  0820               	movf	lcd_PrintDigitInt32@number,w
  2070     0619  00C1               	movwf	lcd_PrintDigitInt32@tempN
  2071     061A                     l1335:
  2072                           
  2073                           ;program.c: 321:         number /= 10;
  2074     061A  3000               	movlw	0
  2075     061B  00F3               	movwf	___aldiv@divisor+3
  2076     061C  3000               	movlw	0
  2077     061D  00F2               	movwf	___aldiv@divisor+2
  2078     061E  3000               	movlw	0
  2079     061F  00F1               	movwf	___aldiv@divisor+1
  2080     0620  300A               	movlw	10
  2081     0621  00F0               	movwf	___aldiv@divisor
  2082     0622  0823               	movf	lcd_PrintDigitInt32@number+3,w
  2083     0623  00F7               	movwf	___aldiv@dividend+3
  2084     0624  0822               	movf	lcd_PrintDigitInt32@number+2,w
  2085     0625  00F6               	movwf	___aldiv@dividend+2
  2086     0626  0821               	movf	lcd_PrintDigitInt32@number+1,w
  2087     0627  00F5               	movwf	___aldiv@dividend+1
  2088     0628  0820               	movf	lcd_PrintDigitInt32@number,w
  2089     0629  00F4               	movwf	___aldiv@dividend
  2090     062A  3185  253E  3185   	fcall	___aldiv
  2091     062D  0873               	movf	?___aldiv+3,w
  2092     062E  0020               	movlb	0	; select bank0
  2093     062F  00A3               	movwf	lcd_PrintDigitInt32@number+3
  2094     0630  0872               	movf	?___aldiv+2,w
  2095     0631  00A2               	movwf	lcd_PrintDigitInt32@number+2
  2096     0632  0871               	movf	?___aldiv+1,w
  2097     0633  00A1               	movwf	lcd_PrintDigitInt32@number+1
  2098     0634  0870               	movf	?___aldiv,w
  2099     0635  00A0               	movwf	lcd_PrintDigitInt32@number
  2100     0636                     l1337:
  2101                           
  2102                           ;program.c: 322:         char tempC = (char)(tempN -10 * number);
  2103     0636  30F6               	movlw	246
  2104     0637  00F0               	movwf	___bmul@multiplicand
  2105     0638  0820               	movf	lcd_PrintDigitInt32@number,w
  2106     0639  3183  2352  3185   	fcall	___bmul
  2107     063C  0020               	movlb	0	; select bank0
  2108     063D  0741               	addwf	lcd_PrintDigitInt32@tempN,w
  2109     063E  00C5               	movwf	lcd_PrintDigitInt32@tempC
  2110     063F                     l1339:
  2111                           
  2112                           ;program.c: 323:         numberRevChar[i1] = tempC + 48;
  2113     063F  0848               	movf	lcd_PrintDigitInt32@i1,w
  2114     0640  3E2B               	addlw	(low (lcd_PrintDigitInt32@numberRevChar| 0))& (0+255)
  2115     0641  0086               	movwf	6
  2116     0642  0187               	clrf	7
  2117     0643  0845               	movf	lcd_PrintDigitInt32@tempC,w
  2118     0644  3E30               	addlw	48
  2119     0645  0081               	movwf	1
  2120     0646                     l1341:
  2121                           
  2122                           ;program.c: 324:         i1++;
  2123     0646  3001               	movlw	1
  2124     0647  07C8               	addwf	lcd_PrintDigitInt32@i1,f
  2125     0648                     l1343:
  2126                           
  2127                           ;program.c: 325:     } while(number);
  2128     0648  0823               	movf	lcd_PrintDigitInt32@number+3,w
  2129     0649  0422               	iorwf	lcd_PrintDigitInt32@number+2,w
  2130     064A  0421               	iorwf	lcd_PrintDigitInt32@number+1,w
  2131     064B  0420               	iorwf	lcd_PrintDigitInt32@number,w
  2132     064C  1D03               	skipz
  2133     064D  2E4F               	goto	u751
  2134     064E  2E50               	goto	u750
  2135     064F                     u751:
  2136     064F  2E11               	goto	l1333
  2137     0650                     u750:
  2138     0650                     l1345:
  2139                           
  2140                           ;program.c: 327:     totalDigit = i1;
  2141     0650  0848               	movf	lcd_PrintDigitInt32@i1,w
  2142     0651  00C7               	movwf	lcd_PrintDigitInt32@totalDigit
  2143     0652                     l1347:
  2144                           
  2145                           ;program.c: 329:     for(i1=0; i1<(noDigit-totalDigit); i1++) {
  2146     0652  01C8               	clrf	lcd_PrintDigitInt32@i1
  2147     0653  2E66               	goto	l1357
  2148     0654                     l1349:
  2149                           
  2150                           ;program.c: 330:         if(enZero) lcd_PrintChar('0');
  2151     0654  0020               	movlb	0	; select bank0
  2152     0655  0826               	movf	lcd_PrintDigitInt32@enZero,w
  2153     0656  1903               	btfsc	3,2
  2154     0657  2E59               	goto	u761
  2155     0658  2E5A               	goto	u760
  2156     0659                     u761:
  2157     0659  2E5F               	goto	l1353
  2158     065A                     u760:
  2159     065A                     l1351:
  2160     065A  3030               	movlw	48
  2161     065B  3183  233A  3185   	fcall	_lcd_PrintChar
  2162     065E  2E63               	goto	l1355
  2163     065F                     l1353:
  2164     065F  3020               	movlw	32
  2165     0660  3183  233A  3185   	fcall	_lcd_PrintChar
  2166     0663                     l1355:
  2167                           
  2168                           ;program.c: 332:     }
  2169     0663  3001               	movlw	1
  2170     0664  0020               	movlb	0	; select bank0
  2171     0665  07C8               	addwf	lcd_PrintDigitInt32@i1,f
  2172     0666                     l1357:
  2173     0666  0824               	movf	lcd_PrintDigitInt32@noDigit,w
  2174     0667  00A7               	movwf	??_lcd_PrintDigitInt32
  2175     0668  01A8               	clrf	??_lcd_PrintDigitInt32+1
  2176     0669  0828               	movf	??_lcd_PrintDigitInt32+1,w
  2177     066A  00AA               	movwf	??_lcd_PrintDigitInt32+3
  2178     066B  0847               	movf	lcd_PrintDigitInt32@totalDigit,w
  2179     066C  0227               	subwf	??_lcd_PrintDigitInt32,w
  2180     066D  00A9               	movwf	??_lcd_PrintDigitInt32+2
  2181     066E  1C03               	skipc
  2182     066F  03AA               	decf	??_lcd_PrintDigitInt32+3,f
  2183     0670  082A               	movf	??_lcd_PrintDigitInt32+3,w
  2184     0671  3A80               	xorlw	128
  2185     0672  3C80               	sublw	128
  2186     0673  1D03               	skipz
  2187     0674  2E77               	goto	u775
  2188     0675  0829               	movf	??_lcd_PrintDigitInt32+2,w
  2189     0676  0248               	subwf	lcd_PrintDigitInt32@i1,w
  2190     0677                     u775:
  2191     0677  1C03               	skipc
  2192     0678  2E7A               	goto	u771
  2193     0679  2E7B               	goto	u770
  2194     067A                     u771:
  2195     067A  2E54               	goto	l1349
  2196     067B                     u770:
  2197     067B                     l1359:
  2198                           
  2199                           ;program.c: 334:     for(i1=totalDigit, i2=0; i1>0; i1--, i2++) {
  2200     067B  0020               	movlb	0	; select bank0
  2201     067C  0847               	movf	lcd_PrintDigitInt32@totalDigit,w
  2202     067D  00C8               	movwf	lcd_PrintDigitInt32@i1
  2203     067E                     l1361:
  2204     067E  01C6               	clrf	lcd_PrintDigitInt32@i2
  2205     067F                     l1363:
  2206     067F  0848               	movf	lcd_PrintDigitInt32@i1,w
  2207     0680  1D03               	btfss	3,2
  2208     0681  2E83               	goto	u781
  2209     0682  2E84               	goto	u780
  2210     0683                     u781:
  2211     0683  2E85               	goto	l1367
  2212     0684                     u780:
  2213     0684  2E95               	goto	l1375
  2214     0685                     l1367:
  2215                           
  2216                           ;program.c: 335:         numberChar[i2] = numberRevChar[i1-1];
  2217     0685  0846               	movf	lcd_PrintDigitInt32@i2,w
  2218     0686  3E36               	addlw	(low (lcd_PrintDigitInt32@numberChar| 0))& (0+255)
  2219     0687  0086               	movwf	6
  2220     0688  0187               	clrf	7
  2221     0689  0848               	movf	lcd_PrintDigitInt32@i1,w
  2222     068A  3EFF               	addlw	255
  2223     068B  3E2B               	addlw	(low (lcd_PrintDigitInt32@numberRevChar| 0))& (0+255)
  2224     068C  0084               	movwf	4
  2225     068D  0185               	clrf	5
  2226     068E  0800               	movf	0,w
  2227     068F  0081               	movwf	1
  2228     0690                     l1369:
  2229                           
  2230                           ;program.c: 336:     }
  2231     0690  3001               	movlw	1
  2232     0691  02C8               	subwf	lcd_PrintDigitInt32@i1,f
  2233     0692                     l1371:
  2234     0692  3001               	movlw	1
  2235     0693  07C6               	addwf	lcd_PrintDigitInt32@i2,f
  2236     0694  2E7F               	goto	l1363
  2237     0695                     l1375:
  2238                           
  2239                           ;program.c: 338:     lcd_PrintString(numberChar);
  2240     0695  3036               	movlw	low lcd_PrintDigitInt32@numberChar
  2241     0696  00F6               	movwf	lcd_PrintString@string
  2242     0697  3000               	movlw	high lcd_PrintDigitInt32@numberChar
  2243     0698  00F7               	movwf	lcd_PrintString@string+1
  2244     0699  3183  2390  3185   	fcall	_lcd_PrintString
  2245     069C                     l157:
  2246     069C  0008               	return
  2247     069D                     __end_of_lcd_PrintDigitInt32:
  2248                           
  2249                           	psect	text4
  2250     03A7                     __ptext4:	
  2251 ;; *************** function _memset *****************
  2252 ;; Defined at:
  2253 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\memset.c"
  2254 ;; Parameters:    Size  Location     Type
  2255 ;;  dest            1    0[COMMON] PTR void 
  2256 ;;		 -> lcd_PrintDigitInt32@numberChar(11), lcd_PrintDigitInt32@numberRevChar(11), lcd_PrintInt32@numberChar(11), lcd_Pr
      +intInt32@numberRevChar(11), 
  2257 ;;  c               2    1[COMMON] int 
  2258 ;;  n               2    3[COMMON] unsigned int 
  2259 ;; Auto vars:     Size  Location     Type
  2260 ;;  p               1    5[COMMON] PTR unsigned char 
  2261 ;;		 -> lcd_PrintDigitInt32@numberChar(11), lcd_PrintDigitInt32@numberRevChar(11), lcd_PrintInt32@numberChar(11), lcd_Pr
      +intInt32@numberRevChar(11), 
  2262 ;; Return value:  Size  Location     Type
  2263 ;;                  1    0[COMMON] PTR void 
  2264 ;; Registers used:
  2265 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2266 ;; Tracked objects:
  2267 ;;		On entry : 0/0
  2268 ;;		On exit  : 0/0
  2269 ;;		Unchanged: 0/0
  2270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2271 ;;      Params:         5       0       0       0       0       0       0
  2272 ;;      Locals:         1       0       0       0       0       0       0
  2273 ;;      Temps:          0       0       0       0       0       0       0
  2274 ;;      Totals:         6       0       0       0       0       0       0
  2275 ;;Total ram usage:        6 bytes
  2276 ;; Hardware stack levels used: 1
  2277 ;; This function calls:
  2278 ;;		Nothing
  2279 ;; This function is called by:
  2280 ;;		_lcd_PrintDigitInt32
  2281 ;;		_lcd_PrintInt32
  2282 ;; This function uses a non-reentrant model
  2283 ;;
  2284                           
  2285     03A7                     _memset:	
  2286                           ;psect for function _memset
  2287                           
  2288     03A7                     l1231:	
  2289                           ;incstack = 0
  2290                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  2291                           
  2292     03A7  0870               	movf	memset@dest,w
  2293     03A8  00F5               	movwf	memset@p
  2294     03A9  2BB1               	goto	l1237
  2295     03AA                     l1233:
  2296     03AA  0875               	movf	memset@p,w
  2297     03AB  0086               	movwf	6
  2298     03AC  0187               	clrf	7
  2299     03AD  0871               	movf	memset@c,w
  2300     03AE  0081               	movwf	1
  2301     03AF                     l1235:
  2302     03AF  3001               	movlw	1
  2303     03B0  07F5               	addwf	memset@p,f
  2304     03B1                     l1237:
  2305     03B1  3001               	movlw	1
  2306     03B2  02F3               	subwf	memset@n,f
  2307     03B3  3000               	movlw	0
  2308     03B4  3BF4               	subwfb	memset@n+1,f
  2309     03B5  0A73               	incf	memset@n,w
  2310     03B6  1D03               	skipz
  2311     03B7  2BBC               	goto	u581
  2312     03B8  0A74               	incf	memset@n+1,w
  2313     03B9  1D03               	btfss	3,2
  2314     03BA  2BBC               	goto	u581
  2315     03BB  2BBD               	goto	u580
  2316     03BC                     u581:
  2317     03BC  2BAA               	goto	l1233
  2318     03BD                     u580:
  2319     03BD                     l793:
  2320     03BD  0008               	return
  2321     03BE                     __end_of_memset:
  2322                           
  2323                           	psect	text5
  2324     0390                     __ptext5:	
  2325 ;; *************** function _lcd_PrintString *****************
  2326 ;; Defined at:
  2327 ;;		line 259 in file "program.c"
  2328 ;; Parameters:    Size  Location     Type
  2329 ;;  string          2    6[COMMON] PTR unsigned char 
  2330 ;;		 -> lcd_PrintDigitInt32@numberChar(11), lcd_PrintInt32@numberChar(11), STR_1(14), 
  2331 ;; Auto vars:     Size  Location     Type
  2332 ;;		None
  2333 ;; Return value:  Size  Location     Type
  2334 ;;                  1    wreg      void 
  2335 ;; Registers used:
  2336 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2337 ;; Tracked objects:
  2338 ;;		On entry : 0/0
  2339 ;;		On exit  : 0/0
  2340 ;;		Unchanged: 0/0
  2341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2342 ;;      Params:         2       0       0       0       0       0       0
  2343 ;;      Locals:         0       0       0       0       0       0       0
  2344 ;;      Temps:          1       0       0       0       0       0       0
  2345 ;;      Totals:         3       0       0       0       0       0       0
  2346 ;;Total ram usage:        3 bytes
  2347 ;; Hardware stack levels used: 1
  2348 ;; Hardware stack levels required when called: 5
  2349 ;; This function calls:
  2350 ;;		_lcd_PrintChar
  2351 ;; This function is called by:
  2352 ;;		_programLoop
  2353 ;;		_lcd_PrintDigitInt32
  2354 ;;		_lcd_PrintInt32
  2355 ;; This function uses a non-reentrant model
  2356 ;;
  2357                           
  2358     0390                     _lcd_PrintString:	
  2359                           ;psect for function _lcd_PrintString
  2360                           
  2361     0390                     l1219:	
  2362                           ;incstack = 0
  2363                           ; Regs used in _lcd_PrintString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2364                           
  2365                           
  2366                           ;program.c: 260:     while(*string!=0) {
  2367     0390  2B9D               	goto	l1225
  2368     0391                     l1221:
  2369                           
  2370                           ;program.c: 261:         lcd_PrintChar(*string);
  2371     0391  0876               	movf	lcd_PrintString@string,w
  2372     0392  0084               	movwf	4
  2373     0393  0877               	movf	lcd_PrintString@string+1,w
  2374     0394  0085               	movwf	5
  2375     0395  0800               	movf	0,w	;code access
  2376     0396  3183  233A  3183   	fcall	_lcd_PrintChar
  2377     0399                     l1223:
  2378                           
  2379                           ;program.c: 262:         string++;
  2380     0399  3001               	movlw	1
  2381     039A  07F6               	addwf	lcd_PrintString@string,f
  2382     039B  3000               	movlw	0
  2383     039C  3DF7               	addwfc	lcd_PrintString@string+1,f
  2384     039D                     l1225:
  2385                           
  2386                           ;program.c: 260:     while(*string!=0) {
  2387     039D  0876               	movf	lcd_PrintString@string,w
  2388     039E  0084               	movwf	4
  2389     039F  0877               	movf	lcd_PrintString@string+1,w
  2390     03A0  0085               	movwf	5
  2391     03A1  0012               	moviw fsr0++
  2392     03A2  1D03               	btfss	3,2
  2393     03A3  2BA5               	goto	u571
  2394     03A4  2BA6               	goto	u570
  2395     03A5                     u571:
  2396     03A5  2B91               	goto	l1221
  2397     03A6                     u570:
  2398     03A6                     l133:
  2399     03A6  0008               	return
  2400     03A7                     __end_of_lcd_PrintString:
  2401                           
  2402                           	psect	text6
  2403     033A                     __ptext6:	
  2404 ;; *************** function _lcd_PrintChar *****************
  2405 ;; Defined at:
  2406 ;;		line 252 in file "program.c"
  2407 ;; Parameters:    Size  Location     Type
  2408 ;;  character       1    wreg     unsigned char 
  2409 ;; Auto vars:     Size  Location     Type
  2410 ;;  character       1    5[COMMON] unsigned char 
  2411 ;; Return value:  Size  Location     Type
  2412 ;;                  1    wreg      void 
  2413 ;; Registers used:
  2414 ;;		wreg, status,2, status,0, pclath, cstack
  2415 ;; Tracked objects:
  2416 ;;		On entry : 0/0
  2417 ;;		On exit  : 0/0
  2418 ;;		Unchanged: 0/0
  2419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2420 ;;      Params:         0       0       0       0       0       0       0
  2421 ;;      Locals:         1       0       0       0       0       0       0
  2422 ;;      Temps:          0       0       0       0       0       0       0
  2423 ;;      Totals:         1       0       0       0       0       0       0
  2424 ;;Total ram usage:        1 bytes
  2425 ;; Hardware stack levels used: 1
  2426 ;; Hardware stack levels required when called: 4
  2427 ;; This function calls:
  2428 ;;		_lcd_DelaySetupTime
  2429 ;;		_lcd_WriteData
  2430 ;; This function is called by:
  2431 ;;		_lcd_PrintString
  2432 ;;		_lcd_PrintDigitInt32
  2433 ;;		_lcd_PrintInt32
  2434 ;; This function uses a non-reentrant model
  2435 ;;
  2436                           
  2437     033A                     _lcd_PrintChar:	
  2438                           ;psect for function _lcd_PrintChar
  2439                           
  2440                           
  2441                           ;incstack = 0
  2442                           ; Regs used in _lcd_PrintChar: [wreg+status,2+status,0+pclath+cstack]
  2443                           ;lcd_PrintChar@character stored from wreg
  2444     033A  00F5               	movwf	lcd_PrintChar@character
  2445     033B                     l1207:
  2446                           
  2447                           ;program.c: 253:     LATBbits.LATB5 = 1;
  2448     033B  0022               	movlb	2	; select bank2
  2449     033C  168D               	bsf	13,5	;volatile
  2450     033D                     l1209:
  2451                           
  2452                           ;program.c: 254:     lcd_DelaySetupTime();
  2453     033D  3183  230B  3183   	fcall	_lcd_DelaySetupTime
  2454                           
  2455                           ;program.c: 256:     lcd_WriteData(character);
  2456     0340  0875               	movf	lcd_PrintChar@character,w
  2457     0341  3184  24B6  3183   	fcall	_lcd_WriteData
  2458     0344                     l127:
  2459     0344  0008               	return
  2460     0345                     __end_of_lcd_PrintChar:
  2461                           
  2462                           	psect	text7
  2463     0365                     __ptext7:	
  2464 ;; *************** function _labs *****************
  2465 ;; Defined at:
  2466 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\labs.c"
  2467 ;; Parameters:    Size  Location     Type
  2468 ;;  a               4    0[COMMON] long 
  2469 ;; Auto vars:     Size  Location     Type
  2470 ;;		None
  2471 ;; Return value:  Size  Location     Type
  2472 ;;                  4    0[COMMON] long 
  2473 ;; Registers used:
  2474 ;;		wreg, status,2, status,0
  2475 ;; Tracked objects:
  2476 ;;		On entry : 0/0
  2477 ;;		On exit  : 0/0
  2478 ;;		Unchanged: 0/0
  2479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2480 ;;      Params:         4       0       0       0       0       0       0
  2481 ;;      Locals:         0       0       0       0       0       0       0
  2482 ;;      Temps:          0       0       0       0       0       0       0
  2483 ;;      Totals:         4       0       0       0       0       0       0
  2484 ;;Total ram usage:        4 bytes
  2485 ;; Hardware stack levels used: 1
  2486 ;; This function calls:
  2487 ;;		Nothing
  2488 ;; This function is called by:
  2489 ;;		_lcd_PrintDigitInt32
  2490 ;;		_lcd_PrintInt32
  2491 ;; This function uses a non-reentrant model
  2492 ;;
  2493                           
  2494     0365                     _labs:	
  2495                           ;psect for function _labs
  2496                           
  2497     0365                     l1239:	
  2498                           ;incstack = 0
  2499                           ; Regs used in _labs: [wreg+status,2+status,0]
  2500                           
  2501     0365  1BF3               	btfsc	labs@a+3,7
  2502     0366  2B68               	goto	u591
  2503     0367  2B69               	goto	u590
  2504     0368                     u591:
  2505     0368  2B6A               	goto	l1243
  2506     0369                     u590:
  2507     0369                     l1241:
  2508     0369  2B79               	goto	l787
  2509     036A                     l1243:
  2510     036A  0970               	comf	labs@a,w
  2511     036B  00F0               	movwf	?_labs
  2512     036C  0971               	comf	labs@a+1,w
  2513     036D  00F1               	movwf	?_labs+1
  2514     036E  0972               	comf	labs@a+2,w
  2515     036F  00F2               	movwf	?_labs+2
  2516     0370  0973               	comf	labs@a+3,w
  2517     0371  00F3               	movwf	?_labs+3
  2518     0372  0AF0               	incf	?_labs,f
  2519     0373  1903               	skipnz
  2520     0374  0AF1               	incf	?_labs+1,f
  2521     0375  1903               	skipnz
  2522     0376  0AF2               	incf	?_labs+2,f
  2523     0377  1903               	skipnz
  2524     0378  0AF3               	incf	?_labs+3,f
  2525     0379                     l787:
  2526     0379  0008               	return
  2527     037A                     __end_of_labs:
  2528                           
  2529                           	psect	text8
  2530     0352                     __ptext8:	
  2531 ;; *************** function ___bmul *****************
  2532 ;; Defined at:
  2533 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\Umul8.c"
  2534 ;; Parameters:    Size  Location     Type
  2535 ;;  multiplier      1    wreg     unsigned char 
  2536 ;;  multiplicand    1    0[COMMON] unsigned char 
  2537 ;; Auto vars:     Size  Location     Type
  2538 ;;  multiplier      1    2[COMMON] unsigned char 
  2539 ;;  product         1    1[COMMON] unsigned char 
  2540 ;; Return value:  Size  Location     Type
  2541 ;;                  1    wreg      unsigned char 
  2542 ;; Registers used:
  2543 ;;		wreg, status,2, status,0
  2544 ;; Tracked objects:
  2545 ;;		On entry : 0/0
  2546 ;;		On exit  : 0/0
  2547 ;;		Unchanged: 0/0
  2548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2549 ;;      Params:         1       0       0       0       0       0       0
  2550 ;;      Locals:         2       0       0       0       0       0       0
  2551 ;;      Temps:          0       0       0       0       0       0       0
  2552 ;;      Totals:         3       0       0       0       0       0       0
  2553 ;;Total ram usage:        3 bytes
  2554 ;; Hardware stack levels used: 1
  2555 ;; This function calls:
  2556 ;;		Nothing
  2557 ;; This function is called by:
  2558 ;;		_lcd_PrintDigitInt32
  2559 ;;		_lcd_PrintInt32
  2560 ;; This function uses a non-reentrant model
  2561 ;;
  2562                           
  2563     0352                     ___bmul:	
  2564                           ;psect for function ___bmul
  2565                           
  2566                           
  2567                           ;incstack = 0
  2568                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2569                           ;___bmul@multiplier stored from wreg
  2570     0352  00F2               	movwf	___bmul@multiplier
  2571     0353                     l1247:
  2572     0353  01F1               	clrf	___bmul@product
  2573     0354                     l1249:
  2574     0354  1C72               	btfss	___bmul@multiplier,0
  2575     0355  2B57               	goto	u601
  2576     0356  2B58               	goto	u600
  2577     0357                     u601:
  2578     0357  2B5A               	goto	l1253
  2579     0358                     u600:
  2580     0358                     l1251:
  2581     0358  0870               	movf	___bmul@multiplicand,w
  2582     0359  07F1               	addwf	___bmul@product,f
  2583     035A                     l1253:
  2584     035A  1003               	clrc
  2585     035B  0DF0               	rlf	___bmul@multiplicand,f
  2586     035C                     l1255:
  2587     035C  1003               	clrc
  2588     035D  0CF2               	rrf	___bmul@multiplier,f
  2589     035E  0872               	movf	___bmul@multiplier,w
  2590     035F  1D03               	btfss	3,2
  2591     0360  2B62               	goto	u611
  2592     0361  2B63               	goto	u610
  2593     0362                     u611:
  2594     0362  2B54               	goto	l1249
  2595     0363                     u610:
  2596     0363                     l1257:
  2597     0363  0871               	movf	___bmul@product,w
  2598     0364                     l350:
  2599     0364  0008               	return
  2600     0365                     __end_of___bmul:
  2601                           
  2602                           	psect	text9
  2603     053E                     __ptext9:	
  2604 ;; *************** function ___aldiv *****************
  2605 ;; Defined at:
  2606 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\aldiv.c"
  2607 ;; Parameters:    Size  Location     Type
  2608 ;;  divisor         4    0[COMMON] long 
  2609 ;;  dividend        4    4[COMMON] long 
  2610 ;; Auto vars:     Size  Location     Type
  2611 ;;  quotient        4   10[COMMON] long 
  2612 ;;  sign            1    9[COMMON] unsigned char 
  2613 ;;  counter         1    8[COMMON] unsigned char 
  2614 ;; Return value:  Size  Location     Type
  2615 ;;                  4    0[COMMON] long 
  2616 ;; Registers used:
  2617 ;;		wreg, status,2, status,0
  2618 ;; Tracked objects:
  2619 ;;		On entry : 0/0
  2620 ;;		On exit  : 0/0
  2621 ;;		Unchanged: 0/0
  2622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2623 ;;      Params:         8       0       0       0       0       0       0
  2624 ;;      Locals:         6       0       0       0       0       0       0
  2625 ;;      Temps:          0       0       0       0       0       0       0
  2626 ;;      Totals:        14       0       0       0       0       0       0
  2627 ;;Total ram usage:       14 bytes
  2628 ;; Hardware stack levels used: 1
  2629 ;; This function calls:
  2630 ;;		Nothing
  2631 ;; This function is called by:
  2632 ;;		_lcd_PrintDigitInt32
  2633 ;;		_lcd_PrintInt32
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637     053E                     ___aldiv:	
  2638                           ;psect for function ___aldiv
  2639                           
  2640     053E                     l1261:	
  2641                           ;incstack = 0
  2642                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2643                           
  2644     053E  01F9               	clrf	___aldiv@sign
  2645     053F                     l1263:
  2646     053F  1FF3               	btfss	___aldiv@divisor+3,7
  2647     0540  2D42               	goto	u621
  2648     0541  2D43               	goto	u620
  2649     0542                     u621:
  2650     0542  2D50               	goto	l389
  2651     0543                     u620:
  2652     0543                     l1265:
  2653     0543  09F0               	comf	___aldiv@divisor,f
  2654     0544  09F1               	comf	___aldiv@divisor+1,f
  2655     0545  09F2               	comf	___aldiv@divisor+2,f
  2656     0546  09F3               	comf	___aldiv@divisor+3,f
  2657     0547  0AF0               	incf	___aldiv@divisor,f
  2658     0548  1903               	skipnz
  2659     0549  0AF1               	incf	___aldiv@divisor+1,f
  2660     054A  1903               	skipnz
  2661     054B  0AF2               	incf	___aldiv@divisor+2,f
  2662     054C  1903               	skipnz
  2663     054D  0AF3               	incf	___aldiv@divisor+3,f
  2664     054E  3001               	movlw	1
  2665     054F  00F9               	movwf	___aldiv@sign
  2666     0550                     l389:
  2667     0550  1FF7               	btfss	___aldiv@dividend+3,7
  2668     0551  2D53               	goto	u631
  2669     0552  2D54               	goto	u630
  2670     0553                     u631:
  2671     0553  2D61               	goto	l1271
  2672     0554                     u630:
  2673     0554                     l1267:
  2674     0554  09F4               	comf	___aldiv@dividend,f
  2675     0555  09F5               	comf	___aldiv@dividend+1,f
  2676     0556  09F6               	comf	___aldiv@dividend+2,f
  2677     0557  09F7               	comf	___aldiv@dividend+3,f
  2678     0558  0AF4               	incf	___aldiv@dividend,f
  2679     0559  1903               	skipnz
  2680     055A  0AF5               	incf	___aldiv@dividend+1,f
  2681     055B  1903               	skipnz
  2682     055C  0AF6               	incf	___aldiv@dividend+2,f
  2683     055D  1903               	skipnz
  2684     055E  0AF7               	incf	___aldiv@dividend+3,f
  2685     055F                     l1269:
  2686     055F  3001               	movlw	1
  2687     0560  06F9               	xorwf	___aldiv@sign,f
  2688     0561                     l1271:
  2689     0561  3000               	movlw	0
  2690     0562  00FD               	movwf	___aldiv@quotient+3
  2691     0563  3000               	movlw	0
  2692     0564  00FC               	movwf	___aldiv@quotient+2
  2693     0565  3000               	movlw	0
  2694     0566  00FB               	movwf	___aldiv@quotient+1
  2695     0567  3000               	movlw	0
  2696     0568  00FA               	movwf	___aldiv@quotient
  2697     0569                     l1273:
  2698     0569  0873               	movf	___aldiv@divisor+3,w
  2699     056A  0472               	iorwf	___aldiv@divisor+2,w
  2700     056B  0471               	iorwf	___aldiv@divisor+1,w
  2701     056C  0470               	iorwf	___aldiv@divisor,w
  2702     056D  1903               	skipnz
  2703     056E  2D70               	goto	u641
  2704     056F  2D71               	goto	u640
  2705     0570                     u641:
  2706     0570  2DB0               	goto	l1293
  2707     0571                     u640:
  2708     0571                     l1275:
  2709     0571  3001               	movlw	1
  2710     0572  00F8               	movwf	___aldiv@counter
  2711     0573  2D7D               	goto	l1279
  2712     0574                     l1277:
  2713     0574  3001               	movlw	1
  2714     0575                     u655:
  2715     0575  35F0               	lslf	___aldiv@divisor,f
  2716     0576  0DF1               	rlf	___aldiv@divisor+1,f
  2717     0577  0DF2               	rlf	___aldiv@divisor+2,f
  2718     0578  0DF3               	rlf	___aldiv@divisor+3,f
  2719     0579  0B89               	decfsz	9,f
  2720     057A  2D75               	goto	u655
  2721     057B  3001               	movlw	1
  2722     057C  07F8               	addwf	___aldiv@counter,f
  2723     057D                     l1279:
  2724     057D  1FF3               	btfss	___aldiv@divisor+3,7
  2725     057E  2D80               	goto	u661
  2726     057F  2D81               	goto	u660
  2727     0580                     u661:
  2728     0580  2D74               	goto	l1277
  2729     0581                     u660:
  2730     0581                     l1281:
  2731     0581  3001               	movlw	1
  2732     0582                     u675:
  2733     0582  35FA               	lslf	___aldiv@quotient,f
  2734     0583  0DFB               	rlf	___aldiv@quotient+1,f
  2735     0584  0DFC               	rlf	___aldiv@quotient+2,f
  2736     0585  0DFD               	rlf	___aldiv@quotient+3,f
  2737     0586  0B89               	decfsz	9,f
  2738     0587  2D82               	goto	u675
  2739     0588                     l1283:
  2740     0588  0873               	movf	___aldiv@divisor+3,w
  2741     0589  0277               	subwf	___aldiv@dividend+3,w
  2742     058A  1D03               	skipz
  2743     058B  2D96               	goto	u685
  2744     058C  0872               	movf	___aldiv@divisor+2,w
  2745     058D  0276               	subwf	___aldiv@dividend+2,w
  2746     058E  1D03               	skipz
  2747     058F  2D96               	goto	u685
  2748     0590  0871               	movf	___aldiv@divisor+1,w
  2749     0591  0275               	subwf	___aldiv@dividend+1,w
  2750     0592  1D03               	skipz
  2751     0593  2D96               	goto	u685
  2752     0594  0870               	movf	___aldiv@divisor,w
  2753     0595  0274               	subwf	___aldiv@dividend,w
  2754     0596                     u685:
  2755     0596  1C03               	skipc
  2756     0597  2D99               	goto	u681
  2757     0598  2D9A               	goto	u680
  2758     0599                     u681:
  2759     0599  2DA3               	goto	l1289
  2760     059A                     u680:
  2761     059A                     l1285:
  2762     059A  0870               	movf	___aldiv@divisor,w
  2763     059B  02F4               	subwf	___aldiv@dividend,f
  2764     059C  0871               	movf	___aldiv@divisor+1,w
  2765     059D  3BF5               	subwfb	___aldiv@dividend+1,f
  2766     059E  0872               	movf	___aldiv@divisor+2,w
  2767     059F  3BF6               	subwfb	___aldiv@dividend+2,f
  2768     05A0  0873               	movf	___aldiv@divisor+3,w
  2769     05A1  3BF7               	subwfb	___aldiv@dividend+3,f
  2770     05A2                     l1287:
  2771     05A2  147A               	bsf	___aldiv@quotient,0
  2772     05A3                     l1289:
  2773     05A3  3001               	movlw	1
  2774     05A4                     u695:
  2775     05A4  36F3               	lsrf	___aldiv@divisor+3,f
  2776     05A5  0CF2               	rrf	___aldiv@divisor+2,f
  2777     05A6  0CF1               	rrf	___aldiv@divisor+1,f
  2778     05A7  0CF0               	rrf	___aldiv@divisor,f
  2779     05A8  0B89               	decfsz	9,f
  2780     05A9  2DA4               	goto	u695
  2781     05AA                     l1291:
  2782     05AA  3001               	movlw	1
  2783     05AB  02F8               	subwf	___aldiv@counter,f
  2784     05AC  1D03               	btfss	3,2
  2785     05AD  2DAF               	goto	u701
  2786     05AE  2DB0               	goto	u700
  2787     05AF                     u701:
  2788     05AF  2D81               	goto	l1281
  2789     05B0                     u700:
  2790     05B0                     l1293:
  2791     05B0  0879               	movf	___aldiv@sign,w
  2792     05B1  1903               	btfsc	3,2
  2793     05B2  2DB4               	goto	u711
  2794     05B3  2DB5               	goto	u710
  2795     05B4                     u711:
  2796     05B4  2DC0               	goto	l1297
  2797     05B5                     u710:
  2798     05B5                     l1295:
  2799     05B5  09FA               	comf	___aldiv@quotient,f
  2800     05B6  09FB               	comf	___aldiv@quotient+1,f
  2801     05B7  09FC               	comf	___aldiv@quotient+2,f
  2802     05B8  09FD               	comf	___aldiv@quotient+3,f
  2803     05B9  0AFA               	incf	___aldiv@quotient,f
  2804     05BA  1903               	skipnz
  2805     05BB  0AFB               	incf	___aldiv@quotient+1,f
  2806     05BC  1903               	skipnz
  2807     05BD  0AFC               	incf	___aldiv@quotient+2,f
  2808     05BE  1903               	skipnz
  2809     05BF  0AFD               	incf	___aldiv@quotient+3,f
  2810     05C0                     l1297:
  2811     05C0  087D               	movf	___aldiv@quotient+3,w
  2812     05C1  00F3               	movwf	?___aldiv+3
  2813     05C2  087C               	movf	___aldiv@quotient+2,w
  2814     05C3  00F2               	movwf	?___aldiv+2
  2815     05C4  087B               	movf	___aldiv@quotient+1,w
  2816     05C5  00F1               	movwf	?___aldiv+1
  2817     05C6  087A               	movf	___aldiv@quotient,w
  2818     05C7  00F0               	movwf	?___aldiv
  2819     05C8                     l399:
  2820     05C8  0008               	return
  2821     05C9                     __end_of___aldiv:
  2822                           
  2823                           	psect	text10
  2824     03BE                     __ptext10:	
  2825 ;; *************** function _lcd_Goto *****************
  2826 ;; Defined at:
  2827 ;;		line 236 in file "program.c"
  2828 ;; Parameters:    Size  Location     Type
  2829 ;;  y               1    wreg     unsigned char 
  2830 ;;  x               1    6[COMMON] unsigned char 
  2831 ;; Auto vars:     Size  Location     Type
  2832 ;;  y               1    7[COMMON] unsigned char 
  2833 ;; Return value:  Size  Location     Type
  2834 ;;                  1    wreg      void 
  2835 ;; Registers used:
  2836 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2837 ;; Tracked objects:
  2838 ;;		On entry : 0/0
  2839 ;;		On exit  : 0/0
  2840 ;;		Unchanged: 0/0
  2841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2842 ;;      Params:         1       0       0       0       0       0       0
  2843 ;;      Locals:         1       0       0       0       0       0       0
  2844 ;;      Temps:          0       0       0       0       0       0       0
  2845 ;;      Totals:         2       0       0       0       0       0       0
  2846 ;;Total ram usage:        2 bytes
  2847 ;; Hardware stack levels used: 1
  2848 ;; Hardware stack levels required when called: 5
  2849 ;; This function calls:
  2850 ;;		_lcd_PrintCmd
  2851 ;; This function is called by:
  2852 ;;		_programLoop
  2853 ;; This function uses a non-reentrant model
  2854 ;;
  2855                           
  2856     03BE                     _lcd_Goto:	
  2857                           ;psect for function _lcd_Goto
  2858                           
  2859                           
  2860                           ;incstack = 0
  2861                           ; Regs used in _lcd_Goto: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2862                           ;lcd_Goto@y stored from wreg
  2863     03BE  00F7               	movwf	lcd_Goto@y
  2864     03BF                     l1305:
  2865                           
  2866                           ;program.c: 237:     switch(y) {
  2867     03BF  2BD2               	goto	l1315
  2868     03C0                     l1307:
  2869                           
  2870                           ;program.c: 239:             lcd_PrintCmd(0x80 + x);
  2871     03C0  0876               	movf	lcd_Goto@x,w
  2872     03C1  3E80               	addlw	128
  2873     03C2  3183  232F  3183   	fcall	_lcd_PrintCmd
  2874                           
  2875                           ;program.c: 240:             break;
  2876     03C5  2BDA               	goto	l124
  2877     03C6                     l1309:
  2878                           
  2879                           ;program.c: 243:             lcd_PrintCmd(0xC0 + x);
  2880     03C6  0876               	movf	lcd_Goto@x,w
  2881     03C7  3EC0               	addlw	192
  2882     03C8  3183  232F  3183   	fcall	_lcd_PrintCmd
  2883                           
  2884                           ;program.c: 244:             break;
  2885     03CB  2BDA               	goto	l124
  2886     03CC                     l1311:
  2887                           
  2888                           ;program.c: 247:             lcd_PrintCmd(0x80 + x);
  2889     03CC  0876               	movf	lcd_Goto@x,w
  2890     03CD  3E80               	addlw	128
  2891     03CE  3183  232F  3183   	fcall	_lcd_PrintCmd
  2892                           
  2893                           ;program.c: 248:             break;
  2894     03D1  2BDA               	goto	l124
  2895     03D2                     l1315:
  2896     03D2  0877               	movf	lcd_Goto@y,w
  2897                           
  2898                           ; Switch size 1, requested type "simple"
  2899                           ; Number of cases is 2, Range of values is 0 to 1
  2900                           ; switch strategies available:
  2901                           ; Name         Instructions Cycles
  2902                           ; simple_byte            7     4 (average)
  2903                           ; direct_byte           10     6 (fixed)
  2904                           ; jumptable            260     6 (fixed)
  2905                           ;	Chosen strategy is simple_byte
  2906     03D3  3A00               	xorlw	0	; case 0
  2907     03D4  1903               	skipnz
  2908     03D5  2BC0               	goto	l1307
  2909     03D6  3A01               	xorlw	1	; case 1
  2910     03D7  1903               	skipnz
  2911     03D8  2BC6               	goto	l1309
  2912     03D9  2BCC               	goto	l1311
  2913     03DA                     l124:
  2914     03DA  0008               	return
  2915     03DB                     __end_of_lcd_Goto:
  2916                           
  2917                           	psect	text11
  2918     0404                     __ptext11:	
  2919 ;; *************** function _programInitialize *****************
  2920 ;; Defined at:
  2921 ;;		line 20 in file "program.c"
  2922 ;; Parameters:    Size  Location     Type
  2923 ;;		None
  2924 ;; Auto vars:     Size  Location     Type
  2925 ;;		None
  2926 ;; Return value:  Size  Location     Type
  2927 ;;                  1    wreg      void 
  2928 ;; Registers used:
  2929 ;;		wreg, status,2, status,0, pclath, cstack
  2930 ;; Tracked objects:
  2931 ;;		On entry : 0/0
  2932 ;;		On exit  : 0/0
  2933 ;;		Unchanged: 0/0
  2934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2935 ;;      Params:         0       0       0       0       0       0       0
  2936 ;;      Locals:         0       0       0       0       0       0       0
  2937 ;;      Temps:          0       0       0       0       0       0       0
  2938 ;;      Totals:         0       0       0       0       0       0       0
  2939 ;;Total ram usage:        0 bytes
  2940 ;; Hardware stack levels used: 1
  2941 ;; Hardware stack levels required when called: 6
  2942 ;; This function calls:
  2943 ;;		_lcd_Initialize
  2944 ;;		_smotor_Rest
  2945 ;; This function is called by:
  2946 ;;		_main
  2947 ;; This function uses a non-reentrant model
  2948 ;;
  2949                           
  2950     0404                     _programInitialize:	
  2951                           ;psect for function _programInitialize
  2952                           
  2953     0404                     l1383:	
  2954                           ;incstack = 0
  2955                           ; Regs used in _programInitialize: [wreg+status,2+status,0+pclath+cstack]
  2956                           
  2957                           
  2958                           ;program.c: 21:     TRISBbits.TRISB6 = 0;
  2959     0404  0021               	movlb	1	; select bank1
  2960     0405  130D               	bcf	13,6	;volatile
  2961                           
  2962                           ;program.c: 22:     LATBbits.LATB6 = 0;
  2963     0406  0022               	movlb	2	; select bank2
  2964     0407  130D               	bcf	13,6	;volatile
  2965                           
  2966                           ;program.c: 24:     LATBbits.LATB6 = 0;
  2967     0408  130D               	bcf	13,6	;volatile
  2968                           
  2969                           ;program.c: 25:     LATBbits.LATB7 = 0;
  2970     0409  138D               	bcf	13,7	;volatile
  2971                           
  2972                           ;program.c: 27:     TRISBbits.TRISB5 = 0;
  2973     040A  0021               	movlb	1	; select bank1
  2974     040B  128D               	bcf	13,5	;volatile
  2975                           
  2976                           ;program.c: 28:     TRISBbits.TRISB4 = 0;
  2977     040C  120D               	bcf	13,4	;volatile
  2978                           
  2979                           ;program.c: 29:     TRISBbits.TRISB3 = 0;
  2980     040D  118D               	bcf	13,3	;volatile
  2981                           
  2982                           ;program.c: 30:     TRISBbits.TRISB2 = 0;
  2983     040E  110D               	bcf	13,2	;volatile
  2984                           
  2985                           ;program.c: 31:     TRISBbits.TRISB1 = 0;
  2986     040F  108D               	bcf	13,1	;volatile
  2987                           
  2988                           ;program.c: 32:     TRISCbits.TRISC5 = 0;
  2989     0410  128E               	bcf	14,5	;volatile
  2990                           
  2991                           ;program.c: 34:     ANSELBbits.ANSB5 = 0;
  2992     0411  0023               	movlb	3	; select bank3
  2993     0412  128D               	bcf	13,5	;volatile
  2994                           
  2995                           ;program.c: 35:     ANSELBbits.ANSB4 = 0;
  2996     0413  120D               	bcf	13,4	;volatile
  2997                           
  2998                           ;program.c: 36:     ANSELBbits.ANSB3 = 0;
  2999     0414  118D               	bcf	13,3	;volatile
  3000                           
  3001                           ;program.c: 37:     ANSELBbits.ANSB2 = 0;
  3002     0415  110D               	bcf	13,2	;volatile
  3003                           
  3004                           ;program.c: 38:     ANSELBbits.ANSB1 = 0;
  3005     0416  108D               	bcf	13,1	;volatile
  3006                           
  3007                           ;program.c: 40:     LATBbits.LATB5 = 0;
  3008     0417  0022               	movlb	2	; select bank2
  3009     0418  128D               	bcf	13,5	;volatile
  3010                           
  3011                           ;program.c: 41:     LATBbits.LATB4 = 0;
  3012     0419  120D               	bcf	13,4	;volatile
  3013                           
  3014                           ;program.c: 42:     LATBbits.LATB3 = 0;
  3015     041A  118D               	bcf	13,3	;volatile
  3016                           
  3017                           ;program.c: 43:     LATBbits.LATB2 = 0;
  3018     041B  110D               	bcf	13,2	;volatile
  3019                           
  3020                           ;program.c: 44:     LATBbits.LATB1 = 0;
  3021     041C  108D               	bcf	13,1	;volatile
  3022                           
  3023                           ;program.c: 45:     LATCbits.LATC5 = 0;
  3024     041D  128E               	bcf	14,5	;volatile
  3025                           
  3026                           ;program.c: 47:     TRISAbits.TRISA1 = 1;
  3027     041E  0021               	movlb	1	; select bank1
  3028     041F  148C               	bsf	12,1	;volatile
  3029                           
  3030                           ;program.c: 48:     TRISAbits.TRISA2 = 1;
  3031     0420  150C               	bsf	12,2	;volatile
  3032                           
  3033                           ;program.c: 49:     TRISAbits.TRISA3 = 1;
  3034     0421  158C               	bsf	12,3	;volatile
  3035                           
  3036                           ;program.c: 50:     TRISAbits.TRISA4 = 1;
  3037     0422  160C               	bsf	12,4	;volatile
  3038                           
  3039                           ;program.c: 52:     ANSELAbits.ANSA1 = 0;
  3040     0423  0023               	movlb	3	; select bank3
  3041     0424  108C               	bcf	12,1	;volatile
  3042                           
  3043                           ;program.c: 53:     ANSELAbits.ANSA2 = 0;
  3044     0425  110C               	bcf	12,2	;volatile
  3045                           
  3046                           ;program.c: 54:     ANSELAbits.ANSA3 = 0;
  3047     0426  118C               	bcf	12,3	;volatile
  3048                           
  3049                           ;program.c: 55:     ANSELAbits.ANSA4 = 0;
  3050     0427  120C               	bcf	12,4	;volatile
  3051                           
  3052                           ;program.c: 58:     TRISCbits.TRISC1 = 0;
  3053     0428  0021               	movlb	1	; select bank1
  3054     0429  108E               	bcf	14,1	;volatile
  3055                           
  3056                           ;program.c: 59:     TRISCbits.TRISC3 = 0;
  3057     042A  118E               	bcf	14,3	;volatile
  3058                           
  3059                           ;program.c: 60:     TRISCbits.TRISC4 = 0;
  3060     042B  120E               	bcf	14,4	;volatile
  3061                           
  3062                           ;program.c: 62:     TRISBbits.TRISB0 = 0;
  3063     042C  100D               	bcf	13,0	;volatile
  3064                           
  3065                           ;program.c: 63:     ANSELBbits.ANSB0 = 0;
  3066     042D  0023               	movlb	3	; select bank3
  3067     042E  100D               	bcf	13,0	;volatile
  3068     042F                     l1385:
  3069                           
  3070                           ;program.c: 65:     lcd_Initialize();
  3071     042F  3184  2436  3184   	fcall	_lcd_Initialize
  3072     0432                     l1387:
  3073                           
  3074                           ;program.c: 66:     smotor_Rest();
  3075     0432  3183  2315  3184   	fcall	_smotor_Rest
  3076     0435                     l67:
  3077     0435  0008               	return
  3078     0436                     __end_of_programInitialize:
  3079                           
  3080                           	psect	text12
  3081     0315                     __ptext12:	
  3082 ;; *************** function _smotor_Rest *****************
  3083 ;; Defined at:
  3084 ;;		line 342 in file "program.c"
  3085 ;; Parameters:    Size  Location     Type
  3086 ;;		None
  3087 ;; Auto vars:     Size  Location     Type
  3088 ;;		None
  3089 ;; Return value:  Size  Location     Type
  3090 ;;                  1    wreg      void 
  3091 ;; Registers used:
  3092 ;;		None
  3093 ;; Tracked objects:
  3094 ;;		On entry : 0/0
  3095 ;;		On exit  : 0/0
  3096 ;;		Unchanged: 0/0
  3097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3098 ;;      Params:         0       0       0       0       0       0       0
  3099 ;;      Locals:         0       0       0       0       0       0       0
  3100 ;;      Temps:          0       0       0       0       0       0       0
  3101 ;;      Totals:         0       0       0       0       0       0       0
  3102 ;;Total ram usage:        0 bytes
  3103 ;; Hardware stack levels used: 1
  3104 ;; This function calls:
  3105 ;;		Nothing
  3106 ;; This function is called by:
  3107 ;;		_programInitialize
  3108 ;;		_programLoop
  3109 ;; This function uses a non-reentrant model
  3110 ;;
  3111                           
  3112     0315                     _smotor_Rest:	
  3113                           ;psect for function _smotor_Rest
  3114                           
  3115     0315                     l1303:	
  3116                           ;incstack = 0
  3117                           ; Regs used in _smotor_Rest: []
  3118                           
  3119                           
  3120                           ;program.c: 343:     LATCbits.LATC1 = 0;
  3121     0315  0022               	movlb	2	; select bank2
  3122     0316  108E               	bcf	14,1	;volatile
  3123                           
  3124                           ;program.c: 344:     LATBbits.LATB0 = 0;
  3125     0317  100D               	bcf	13,0	;volatile
  3126                           
  3127                           ;program.c: 345:     LATCbits.LATC4 = 0;
  3128     0318  120E               	bcf	14,4	;volatile
  3129                           
  3130                           ;program.c: 346:     LATCbits.LATC3 = 0;
  3131     0319  118E               	bcf	14,3	;volatile
  3132     031A                     l160:
  3133     031A  0008               	return
  3134     031B                     __end_of_smotor_Rest:
  3135                           
  3136                           	psect	text13
  3137     0436                     __ptext13:	
  3138 ;; *************** function _lcd_Initialize *****************
  3139 ;; Defined at:
  3140 ;;		line 211 in file "program.c"
  3141 ;; Parameters:    Size  Location     Type
  3142 ;;		None
  3143 ;; Auto vars:     Size  Location     Type
  3144 ;;		None
  3145 ;; Return value:  Size  Location     Type
  3146 ;;                  1    wreg      void 
  3147 ;; Registers used:
  3148 ;;		wreg, status,2, status,0, pclath, cstack
  3149 ;; Tracked objects:
  3150 ;;		On entry : 0/0
  3151 ;;		On exit  : 0/0
  3152 ;;		Unchanged: 0/0
  3153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3154 ;;      Params:         0       0       0       0       0       0       0
  3155 ;;      Locals:         0       0       0       0       0       0       0
  3156 ;;      Temps:          0       0       0       0       0       0       0
  3157 ;;      Totals:         0       0       0       0       0       0       0
  3158 ;;Total ram usage:        0 bytes
  3159 ;; Hardware stack levels used: 1
  3160 ;; Hardware stack levels required when called: 5
  3161 ;; This function calls:
  3162 ;;		_delay_ms
  3163 ;;		_delay_x24o25us
  3164 ;;		_lcd_PrintCmd
  3165 ;; This function is called by:
  3166 ;;		_programInitialize
  3167 ;; This function uses a non-reentrant model
  3168 ;;
  3169                           
  3170     0436                     _lcd_Initialize:	
  3171                           ;psect for function _lcd_Initialize
  3172                           
  3173     0436                     l1301:	
  3174                           ;incstack = 0
  3175                           ; Regs used in _lcd_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3176                           
  3177                           
  3178                           ;program.c: 212:     delay_ms(10);
  3179     0436  3000               	movlw	0
  3180     0437  00F9               	movwf	delay_ms@delay+3
  3181     0438  3000               	movlw	0
  3182     0439  00F8               	movwf	delay_ms@delay+2
  3183     043A  3000               	movlw	0
  3184     043B  00F7               	movwf	delay_ms@delay+1
  3185     043C  300A               	movlw	10
  3186     043D  00F6               	movwf	delay_ms@delay
  3187     043E  3183  23DB  3184   	fcall	_delay_ms
  3188                           
  3189                           ;program.c: 215:     lcd_PrintCmd(0x33);
  3190     0441  3033               	movlw	51
  3191     0442  3183  232F  3184   	fcall	_lcd_PrintCmd
  3192                           
  3193                           ;program.c: 216:     lcd_PrintCmd(0x32);
  3194     0445  3032               	movlw	50
  3195     0446  3183  232F  3184   	fcall	_lcd_PrintCmd
  3196                           
  3197                           ;program.c: 219:     lcd_PrintCmd(0x28);
  3198     0449  3028               	movlw	40
  3199     044A  3183  232F  3184   	fcall	_lcd_PrintCmd
  3200                           
  3201                           ;program.c: 220:     lcd_PrintCmd(0x02);
  3202     044D  3002               	movlw	2
  3203     044E  3183  232F  3184   	fcall	_lcd_PrintCmd
  3204                           
  3205                           ;program.c: 221:     lcd_PrintCmd(0x0C);
  3206     0451  300C               	movlw	12
  3207     0452  3183  232F  3184   	fcall	_lcd_PrintCmd
  3208                           
  3209                           ;program.c: 222:     lcd_PrintCmd(0x06);
  3210     0455  3006               	movlw	6
  3211     0456  3183  232F  3184   	fcall	_lcd_PrintCmd
  3212                           
  3213                           ;program.c: 223:     lcd_PrintCmd(0x01);
  3214     0459  3001               	movlw	1
  3215     045A  3183  232F  3184   	fcall	_lcd_PrintCmd
  3216                           
  3217                           ;program.c: 224:     lcd_PrintCmd(0x80);
  3218     045D  3080               	movlw	128
  3219     045E  3183  232F  3184   	fcall	_lcd_PrintCmd
  3220                           
  3221                           ;program.c: 226:     delay_x24o25us(63);
  3222     0461  303F               	movlw	63
  3223     0462  00F2               	movwf	delay_x24o25us@delay
  3224     0463  3000               	movlw	0
  3225     0464  00F3               	movwf	delay_x24o25us@delay+1
  3226     0465  3183  237A  3184   	fcall	_delay_x24o25us
  3227     0468                     l113:
  3228     0468  0008               	return
  3229     0469                     __end_of_lcd_Initialize:
  3230                           
  3231                           	psect	text14
  3232     032F                     __ptext14:	
  3233 ;; *************** function _lcd_PrintCmd *****************
  3234 ;; Defined at:
  3235 ;;		line 204 in file "program.c"
  3236 ;; Parameters:    Size  Location     Type
  3237 ;;  command         1    wreg     unsigned char 
  3238 ;; Auto vars:     Size  Location     Type
  3239 ;;  command         1    5[COMMON] unsigned char 
  3240 ;; Return value:  Size  Location     Type
  3241 ;;                  1    wreg      void 
  3242 ;; Registers used:
  3243 ;;		wreg, status,2, status,0, pclath, cstack
  3244 ;; Tracked objects:
  3245 ;;		On entry : 0/0
  3246 ;;		On exit  : 0/0
  3247 ;;		Unchanged: 0/0
  3248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3249 ;;      Params:         0       0       0       0       0       0       0
  3250 ;;      Locals:         1       0       0       0       0       0       0
  3251 ;;      Temps:          0       0       0       0       0       0       0
  3252 ;;      Totals:         1       0       0       0       0       0       0
  3253 ;;Total ram usage:        1 bytes
  3254 ;; Hardware stack levels used: 1
  3255 ;; Hardware stack levels required when called: 4
  3256 ;; This function calls:
  3257 ;;		_lcd_DelaySetupTime
  3258 ;;		_lcd_WriteData
  3259 ;; This function is called by:
  3260 ;;		_lcd_Initialize
  3261 ;;		_lcd_Goto
  3262 ;;		_lcd_ClearAll
  3263 ;; This function uses a non-reentrant model
  3264 ;;
  3265                           
  3266     032F                     _lcd_PrintCmd:	
  3267                           ;psect for function _lcd_PrintCmd
  3268                           
  3269                           
  3270                           ;incstack = 0
  3271                           ; Regs used in _lcd_PrintCmd: [wreg+status,2+status,0+pclath+cstack]
  3272                           ;lcd_PrintCmd@command stored from wreg
  3273     032F  00F5               	movwf	lcd_PrintCmd@command
  3274     0330                     l1227:
  3275                           
  3276                           ;program.c: 205:     LATBbits.LATB5 = 0;
  3277     0330  0022               	movlb	2	; select bank2
  3278     0331  128D               	bcf	13,5	;volatile
  3279     0332                     l1229:
  3280                           
  3281                           ;program.c: 206:     lcd_DelaySetupTime();
  3282     0332  3183  230B  3183   	fcall	_lcd_DelaySetupTime
  3283                           
  3284                           ;program.c: 208:     lcd_WriteData(command);
  3285     0335  0875               	movf	lcd_PrintCmd@command,w
  3286     0336  3184  24B6  3183   	fcall	_lcd_WriteData
  3287     0339                     l110:
  3288     0339  0008               	return
  3289     033A                     __end_of_lcd_PrintCmd:
  3290                           
  3291                           	psect	text15
  3292     04B6                     __ptext15:	
  3293 ;; *************** function _lcd_WriteData *****************
  3294 ;; Defined at:
  3295 ;;		line 183 in file "program.c"
  3296 ;; Parameters:    Size  Location     Type
  3297 ;;  data            1    wreg     unsigned char 
  3298 ;; Auto vars:     Size  Location     Type
  3299 ;;  data            1    4[COMMON] unsigned char 
  3300 ;; Return value:  Size  Location     Type
  3301 ;;                  1    wreg      void 
  3302 ;; Registers used:
  3303 ;;		wreg, status,2, status,0, pclath, cstack
  3304 ;; Tracked objects:
  3305 ;;		On entry : 0/0
  3306 ;;		On exit  : 0/0
  3307 ;;		Unchanged: 0/0
  3308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3309 ;;      Params:         0       0       0       0       0       0       0
  3310 ;;      Locals:         1       0       0       0       0       0       0
  3311 ;;      Temps:          2       0       0       0       0       0       0
  3312 ;;      Totals:         3       0       0       0       0       0       0
  3313 ;;Total ram usage:        3 bytes
  3314 ;; Hardware stack levels used: 1
  3315 ;; Hardware stack levels required when called: 3
  3316 ;; This function calls:
  3317 ;;		_delay_x1o5us
  3318 ;;		_lcd_EPulse
  3319 ;; This function is called by:
  3320 ;;		_lcd_PrintCmd
  3321 ;;		_lcd_PrintChar
  3322 ;; This function uses a non-reentrant model
  3323 ;;
  3324                           
  3325     04B6                     _lcd_WriteData:	
  3326                           ;psect for function _lcd_WriteData
  3327                           
  3328                           
  3329                           ;incstack = 0
  3330                           ; Regs used in _lcd_WriteData: [wreg+status,2+status,0+pclath+cstack]
  3331                           ;lcd_WriteData@data stored from wreg
  3332     04B6  00F4               	movwf	lcd_WriteData@data
  3333     04B7                     l1183:
  3334                           
  3335                           ;program.c: 185:     LATCbits.LATC5 = (data >> 7) & 0x01;
  3336     04B7  0874               	movf	lcd_WriteData@data,w
  3337     04B8  00F2               	movwf	??_lcd_WriteData
  3338     04B9  3007               	movlw	7
  3339     04BA                     u485:
  3340     04BA  36F2               	lsrf	??_lcd_WriteData,f
  3341     04BB  0B89               	decfsz	9,f
  3342     04BC  2CBA               	goto	u485
  3343     04BD  0872               	movf	??_lcd_WriteData,w
  3344     04BE  3901               	andlw	1
  3345     04BF  00F3               	movwf	??_lcd_WriteData+1
  3346     04C0  0EF3               	swapf	??_lcd_WriteData+1,f
  3347     04C1  0DF3               	rlf	??_lcd_WriteData+1,f
  3348     04C2  0022               	movlb	2	; select bank2
  3349     04C3  080E               	movf	14,w	;volatile
  3350     04C4  0673               	xorwf	??_lcd_WriteData+1,w
  3351     04C5  39DF               	andlw	-33
  3352     04C6  0673               	xorwf	??_lcd_WriteData+1,w
  3353     04C7  008E               	movwf	14	;volatile
  3354                           
  3355                           ;program.c: 186:     LATBbits.LATB1 = (data >> 6) & 0x01;
  3356     04C8  0874               	movf	lcd_WriteData@data,w
  3357     04C9  00F2               	movwf	??_lcd_WriteData
  3358     04CA  3006               	movlw	6
  3359     04CB                     u495:
  3360     04CB  36F2               	lsrf	??_lcd_WriteData,f
  3361     04CC  0B89               	decfsz	9,f
  3362     04CD  2CCB               	goto	u495
  3363     04CE  0872               	movf	??_lcd_WriteData,w
  3364     04CF  3901               	andlw	1
  3365     04D0  00F3               	movwf	??_lcd_WriteData+1
  3366     04D1  0DF3               	rlf	??_lcd_WriteData+1,f
  3367     04D2  080D               	movf	13,w	;volatile
  3368     04D3  0673               	xorwf	??_lcd_WriteData+1,w
  3369     04D4  39FD               	andlw	-3
  3370     04D5  0673               	xorwf	??_lcd_WriteData+1,w
  3371     04D6  008D               	movwf	13	;volatile
  3372                           
  3373                           ;program.c: 187:     LATBbits.LATB2 = (data >> 5) & 0x01;
  3374     04D7  0874               	movf	lcd_WriteData@data,w
  3375     04D8  00F2               	movwf	??_lcd_WriteData
  3376     04D9  3005               	movlw	5
  3377     04DA                     u505:
  3378     04DA  36F2               	lsrf	??_lcd_WriteData,f
  3379     04DB  0B89               	decfsz	9,f
  3380     04DC  2CDA               	goto	u505
  3381     04DD  0872               	movf	??_lcd_WriteData,w
  3382     04DE  3901               	andlw	1
  3383     04DF  00F3               	movwf	??_lcd_WriteData+1
  3384     04E0  0DF3               	rlf	??_lcd_WriteData+1,f
  3385     04E1  0DF3               	rlf	??_lcd_WriteData+1,f
  3386     04E2  080D               	movf	13,w	;volatile
  3387     04E3  0673               	xorwf	??_lcd_WriteData+1,w
  3388     04E4  39FB               	andlw	-5
  3389     04E5  0673               	xorwf	??_lcd_WriteData+1,w
  3390     04E6  008D               	movwf	13	;volatile
  3391                           
  3392                           ;program.c: 188:     LATBbits.LATB3 = (data >> 4) & 0x01;
  3393     04E7  0874               	movf	lcd_WriteData@data,w
  3394     04E8  00F2               	movwf	??_lcd_WriteData
  3395     04E9  3004               	movlw	4
  3396     04EA                     u515:
  3397     04EA  36F2               	lsrf	??_lcd_WriteData,f
  3398     04EB  0B89               	decfsz	9,f
  3399     04EC  2CEA               	goto	u515
  3400     04ED  0872               	movf	??_lcd_WriteData,w
  3401     04EE  3901               	andlw	1
  3402     04EF  00F3               	movwf	??_lcd_WriteData+1
  3403     04F0  0DF3               	rlf	??_lcd_WriteData+1,f
  3404     04F1  0DF3               	rlf	??_lcd_WriteData+1,f
  3405     04F2  0DF3               	rlf	??_lcd_WriteData+1,f
  3406     04F3  080D               	movf	13,w	;volatile
  3407     04F4  0673               	xorwf	??_lcd_WriteData+1,w
  3408     04F5  39F7               	andlw	-9
  3409     04F6  0673               	xorwf	??_lcd_WriteData+1,w
  3410     04F7  008D               	movwf	13	;volatile
  3411     04F8                     l1185:
  3412                           
  3413                           ;program.c: 190:     lcd_EPulse();
  3414     04F8  3183  2324  3184   	fcall	_lcd_EPulse
  3415     04FB                     l1187:
  3416                           
  3417                           ;program.c: 193:     LATCbits.LATC5 = (data >> 3) & 0x01;
  3418     04FB  0874               	movf	lcd_WriteData@data,w
  3419     04FC  00F2               	movwf	??_lcd_WriteData
  3420     04FD  3003               	movlw	3
  3421     04FE                     u525:
  3422     04FE  36F2               	lsrf	??_lcd_WriteData,f
  3423     04FF  0B89               	decfsz	9,f
  3424     0500  2CFE               	goto	u525
  3425     0501  0872               	movf	??_lcd_WriteData,w
  3426     0502  3901               	andlw	1
  3427     0503  00F3               	movwf	??_lcd_WriteData+1
  3428     0504  0EF3               	swapf	??_lcd_WriteData+1,f
  3429     0505  0DF3               	rlf	??_lcd_WriteData+1,f
  3430     0506  0022               	movlb	2	; select bank2
  3431     0507  080E               	movf	14,w	;volatile
  3432     0508  0673               	xorwf	??_lcd_WriteData+1,w
  3433     0509  39DF               	andlw	-33
  3434     050A  0673               	xorwf	??_lcd_WriteData+1,w
  3435     050B  008E               	movwf	14	;volatile
  3436     050C                     l1189:
  3437                           
  3438                           ;program.c: 194:     LATBbits.LATB1 = (data >> 2) & 0x01;
  3439     050C  0874               	movf	lcd_WriteData@data,w
  3440     050D  00F2               	movwf	??_lcd_WriteData
  3441     050E  3002               	movlw	2
  3442     050F                     u535:
  3443     050F  36F2               	lsrf	??_lcd_WriteData,f
  3444     0510  0B89               	decfsz	9,f
  3445     0511  2D0F               	goto	u535
  3446     0512  0872               	movf	??_lcd_WriteData,w
  3447     0513  3901               	andlw	1
  3448     0514  00F3               	movwf	??_lcd_WriteData+1
  3449     0515  0DF3               	rlf	??_lcd_WriteData+1,f
  3450     0516  080D               	movf	13,w	;volatile
  3451     0517  0673               	xorwf	??_lcd_WriteData+1,w
  3452     0518  39FD               	andlw	-3
  3453     0519  0673               	xorwf	??_lcd_WriteData+1,w
  3454     051A  008D               	movwf	13	;volatile
  3455     051B                     l1191:
  3456                           
  3457                           ;program.c: 195:     LATBbits.LATB2 = (data >> 1) & 0x01;
  3458     051B  0874               	movf	lcd_WriteData@data,w
  3459     051C  00F2               	movwf	??_lcd_WriteData
  3460     051D  3001               	movlw	1
  3461     051E                     u545:
  3462     051E  36F2               	lsrf	??_lcd_WriteData,f
  3463     051F  0B89               	decfsz	9,f
  3464     0520  2D1E               	goto	u545
  3465     0521  0872               	movf	??_lcd_WriteData,w
  3466     0522  3901               	andlw	1
  3467     0523  00F3               	movwf	??_lcd_WriteData+1
  3468     0524  0DF3               	rlf	??_lcd_WriteData+1,f
  3469     0525  0DF3               	rlf	??_lcd_WriteData+1,f
  3470     0526  080D               	movf	13,w	;volatile
  3471     0527  0673               	xorwf	??_lcd_WriteData+1,w
  3472     0528  39FB               	andlw	-5
  3473     0529  0673               	xorwf	??_lcd_WriteData+1,w
  3474     052A  008D               	movwf	13	;volatile
  3475     052B                     l1193:
  3476                           
  3477                           ;program.c: 196:     LATBbits.LATB3 = data & 0x01;
  3478     052B  0874               	movf	lcd_WriteData@data,w
  3479     052C  3901               	andlw	1
  3480     052D  00F2               	movwf	??_lcd_WriteData
  3481     052E  0DF2               	rlf	??_lcd_WriteData,f
  3482     052F  0DF2               	rlf	??_lcd_WriteData,f
  3483     0530  0DF2               	rlf	??_lcd_WriteData,f
  3484     0531  080D               	movf	13,w	;volatile
  3485     0532  0672               	xorwf	??_lcd_WriteData,w
  3486     0533  39F7               	andlw	-9
  3487     0534  0672               	xorwf	??_lcd_WriteData,w
  3488     0535  008D               	movwf	13	;volatile
  3489     0536                     l1195:
  3490                           
  3491                           ;program.c: 198:     lcd_EPulse();
  3492     0536  3183  2324  3184   	fcall	_lcd_EPulse
  3493     0539                     l1197:
  3494                           
  3495                           ;program.c: 200:     delay_x1o5us(25);
  3496     0539  3019               	movlw	25
  3497     053A  3183  2345  3184   	fcall	_delay_x1o5us
  3498     053D                     l107:
  3499     053D  0008               	return
  3500     053E                     __end_of_lcd_WriteData:
  3501                           
  3502                           	psect	text16
  3503     0324                     __ptext16:	
  3504 ;; *************** function _lcd_EPulse *****************
  3505 ;; Defined at:
  3506 ;;		line 175 in file "program.c"
  3507 ;; Parameters:    Size  Location     Type
  3508 ;;		None
  3509 ;; Auto vars:     Size  Location     Type
  3510 ;;		None
  3511 ;; Return value:  Size  Location     Type
  3512 ;;                  1    wreg      void 
  3513 ;; Registers used:
  3514 ;;		wreg, status,2, status,0, pclath, cstack
  3515 ;; Tracked objects:
  3516 ;;		On entry : 0/0
  3517 ;;		On exit  : 0/0
  3518 ;;		Unchanged: 0/0
  3519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3520 ;;      Params:         0       0       0       0       0       0       0
  3521 ;;      Locals:         0       0       0       0       0       0       0
  3522 ;;      Temps:          0       0       0       0       0       0       0
  3523 ;;      Totals:         0       0       0       0       0       0       0
  3524 ;;Total ram usage:        0 bytes
  3525 ;; Hardware stack levels used: 1
  3526 ;; Hardware stack levels required when called: 2
  3527 ;; This function calls:
  3528 ;;		_lcd_DelayPulse
  3529 ;; This function is called by:
  3530 ;;		_lcd_WriteData
  3531 ;; This function uses a non-reentrant model
  3532 ;;
  3533                           
  3534     0324                     _lcd_EPulse:	
  3535                           ;psect for function _lcd_EPulse
  3536                           
  3537     0324                     l1175:	
  3538                           ;incstack = 0
  3539                           ; Regs used in _lcd_EPulse: [wreg+status,2+status,0+pclath+cstack]
  3540                           
  3541                           
  3542                           ;program.c: 176:     LATBbits.LATB4 = 1;
  3543     0324  0022               	movlb	2	; select bank2
  3544     0325  160D               	bsf	13,4	;volatile
  3545     0326                     l1177:
  3546                           
  3547                           ;program.c: 177:     lcd_DelayPulse();
  3548     0326  3183  2310  3183   	fcall	_lcd_DelayPulse
  3549     0329                     l1179:
  3550                           
  3551                           ;program.c: 179:     LATBbits.LATB4 = 0;
  3552     0329  0022               	movlb	2	; select bank2
  3553     032A  120D               	bcf	13,4	;volatile
  3554                           
  3555                           ;program.c: 180:     lcd_DelayPulse();
  3556     032B  3183  2310  3183   	fcall	_lcd_DelayPulse
  3557     032E                     l104:
  3558     032E  0008               	return
  3559     032F                     __end_of_lcd_EPulse:
  3560                           
  3561                           	psect	text17
  3562     0310                     __ptext17:	
  3563 ;; *************** function _lcd_DelayPulse *****************
  3564 ;; Defined at:
  3565 ;;		line 170 in file "program.c"
  3566 ;; Parameters:    Size  Location     Type
  3567 ;;		None
  3568 ;; Auto vars:     Size  Location     Type
  3569 ;;		None
  3570 ;; Return value:  Size  Location     Type
  3571 ;;                  1    wreg      void 
  3572 ;; Registers used:
  3573 ;;		wreg, status,2, status,0, pclath, cstack
  3574 ;; Tracked objects:
  3575 ;;		On entry : 0/0
  3576 ;;		On exit  : 0/0
  3577 ;;		Unchanged: 0/0
  3578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3579 ;;      Params:         0       0       0       0       0       0       0
  3580 ;;      Locals:         0       0       0       0       0       0       0
  3581 ;;      Temps:          0       0       0       0       0       0       0
  3582 ;;      Totals:         0       0       0       0       0       0       0
  3583 ;;Total ram usage:        0 bytes
  3584 ;; Hardware stack levels used: 1
  3585 ;; Hardware stack levels required when called: 1
  3586 ;; This function calls:
  3587 ;;		_delay_x1o5us
  3588 ;; This function is called by:
  3589 ;;		_lcd_EPulse
  3590 ;; This function uses a non-reentrant model
  3591 ;;
  3592                           
  3593     0310                     _lcd_DelayPulse:	
  3594                           ;psect for function _lcd_DelayPulse
  3595                           
  3596     0310                     l1173:	
  3597                           ;incstack = 0
  3598                           ; Regs used in _lcd_DelayPulse: [wreg+status,2+status,0+pclath+cstack]
  3599                           
  3600                           
  3601                           ;program.c: 172:     delay_x1o5us(200);
  3602     0310  30C8               	movlw	200
  3603     0311  3183  2345  3183   	fcall	_delay_x1o5us
  3604     0314                     l101:
  3605     0314  0008               	return
  3606     0315                     __end_of_lcd_DelayPulse:
  3607                           
  3608                           	psect	text18
  3609     030B                     __ptext18:	
  3610 ;; *************** function _lcd_DelaySetupTime *****************
  3611 ;; Defined at:
  3612 ;;		line 165 in file "program.c"
  3613 ;; Parameters:    Size  Location     Type
  3614 ;;		None
  3615 ;; Auto vars:     Size  Location     Type
  3616 ;;		None
  3617 ;; Return value:  Size  Location     Type
  3618 ;;                  1    wreg      void 
  3619 ;; Registers used:
  3620 ;;		wreg, status,2, status,0, pclath, cstack
  3621 ;; Tracked objects:
  3622 ;;		On entry : 0/0
  3623 ;;		On exit  : 0/0
  3624 ;;		Unchanged: 0/0
  3625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3626 ;;      Params:         0       0       0       0       0       0       0
  3627 ;;      Locals:         0       0       0       0       0       0       0
  3628 ;;      Temps:          0       0       0       0       0       0       0
  3629 ;;      Totals:         0       0       0       0       0       0       0
  3630 ;;Total ram usage:        0 bytes
  3631 ;; Hardware stack levels used: 1
  3632 ;; Hardware stack levels required when called: 1
  3633 ;; This function calls:
  3634 ;;		_delay_x1o5us
  3635 ;; This function is called by:
  3636 ;;		_lcd_PrintCmd
  3637 ;;		_lcd_PrintChar
  3638 ;; This function uses a non-reentrant model
  3639 ;;
  3640                           
  3641     030B                     _lcd_DelaySetupTime:	
  3642                           ;psect for function _lcd_DelaySetupTime
  3643                           
  3644     030B                     l1181:	
  3645                           ;incstack = 0
  3646                           ; Regs used in _lcd_DelaySetupTime: [wreg+status,2+status,0+pclath+cstack]
  3647                           
  3648                           
  3649                           ;program.c: 167:     delay_x1o5us(200);
  3650     030B  30C8               	movlw	200
  3651     030C  3183  2345  3183   	fcall	_delay_x1o5us
  3652     030F                     l98:
  3653     030F  0008               	return
  3654     0310                     __end_of_lcd_DelaySetupTime:
  3655                           
  3656                           	psect	text19
  3657     03DB                     __ptext19:	
  3658 ;; *************** function _delay_ms *****************
  3659 ;; Defined at:
  3660 ;;		line 15 in file "program.c"
  3661 ;; Parameters:    Size  Location     Type
  3662 ;;  delay           4    6[COMMON] unsigned long 
  3663 ;; Auto vars:     Size  Location     Type
  3664 ;;  i               4   10[COMMON] unsigned long 
  3665 ;; Return value:  Size  Location     Type
  3666 ;;                  1    wreg      void 
  3667 ;; Registers used:
  3668 ;;		wreg, status,2, status,0, pclath, cstack
  3669 ;; Tracked objects:
  3670 ;;		On entry : 0/0
  3671 ;;		On exit  : 0/0
  3672 ;;		Unchanged: 0/0
  3673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3674 ;;      Params:         4       0       0       0       0       0       0
  3675 ;;      Locals:         4       0       0       0       0       0       0
  3676 ;;      Temps:          0       0       0       0       0       0       0
  3677 ;;      Totals:         8       0       0       0       0       0       0
  3678 ;;Total ram usage:        8 bytes
  3679 ;; Hardware stack levels used: 1
  3680 ;; Hardware stack levels required when called: 2
  3681 ;; This function calls:
  3682 ;;		_delay_x24o25us
  3683 ;; This function is called by:
  3684 ;;		_programLoop
  3685 ;;		_lcd_Initialize
  3686 ;;		_pb_DelayDebounce
  3687 ;; This function uses a non-reentrant model
  3688 ;;
  3689                           
  3690     03DB                     _delay_ms:	
  3691                           ;psect for function _delay_ms
  3692                           
  3693     03DB                     l1211:	
  3694                           ;incstack = 0
  3695                           ; Regs used in _delay_ms: [wreg+status,2+status,0+pclath+cstack]
  3696                           
  3697                           
  3698                           ;program.c: 16:     for(uint32_t i=0; i<delay; i++) delay_x24o25us(41);
  3699     03DB  3000               	movlw	0
  3700     03DC  00FD               	movwf	delay_ms@i+3
  3701     03DD  3000               	movlw	0
  3702     03DE  00FC               	movwf	delay_ms@i+2
  3703     03DF  3000               	movlw	0
  3704     03E0  00FB               	movwf	delay_ms@i+1
  3705     03E1  3000               	movlw	0
  3706     03E2  00FA               	movwf	delay_ms@i
  3707     03E3  2BF1               	goto	l1217
  3708     03E4                     l1213:
  3709     03E4  3029               	movlw	41
  3710     03E5  00F2               	movwf	delay_x24o25us@delay
  3711     03E6  3000               	movlw	0
  3712     03E7  00F3               	movwf	delay_x24o25us@delay+1
  3713     03E8  3183  237A  3183   	fcall	_delay_x24o25us
  3714     03EB                     l1215:
  3715     03EB  3001               	movlw	1
  3716     03EC  07FA               	addwf	delay_ms@i,f
  3717     03ED  3000               	movlw	0
  3718     03EE  3DFB               	addwfc	delay_ms@i+1,f
  3719     03EF  3DFC               	addwfc	delay_ms@i+2,f
  3720     03F0  3DFD               	addwfc	delay_ms@i+3,f
  3721     03F1                     l1217:
  3722     03F1  0879               	movf	delay_ms@delay+3,w
  3723     03F2  027D               	subwf	delay_ms@i+3,w
  3724     03F3  1D03               	skipz
  3725     03F4  2BFF               	goto	u565
  3726     03F5  0878               	movf	delay_ms@delay+2,w
  3727     03F6  027C               	subwf	delay_ms@i+2,w
  3728     03F7  1D03               	skipz
  3729     03F8  2BFF               	goto	u565
  3730     03F9  0877               	movf	delay_ms@delay+1,w
  3731     03FA  027B               	subwf	delay_ms@i+1,w
  3732     03FB  1D03               	skipz
  3733     03FC  2BFF               	goto	u565
  3734     03FD  0876               	movf	delay_ms@delay,w
  3735     03FE  027A               	subwf	delay_ms@i,w
  3736     03FF                     u565:
  3737     03FF  1C03               	skipc
  3738     0400  2C02               	goto	u561
  3739     0401  2C03               	goto	u560
  3740     0402                     u561:
  3741     0402  2BE4               	goto	l1213
  3742     0403                     u560:
  3743     0403                     l64:
  3744     0403  0008               	return
  3745     0404                     __end_of_delay_ms:
  3746                           
  3747                           	psect	text20
  3748     037A                     __ptext20:	
  3749 ;; *************** function _delay_x24o25us *****************
  3750 ;; Defined at:
  3751 ;;		line 10 in file "program.c"
  3752 ;; Parameters:    Size  Location     Type
  3753 ;;  delay           2    2[COMMON] unsigned short 
  3754 ;; Auto vars:     Size  Location     Type
  3755 ;;  i               2    4[COMMON] unsigned short 
  3756 ;; Return value:  Size  Location     Type
  3757 ;;                  1    wreg      void 
  3758 ;; Registers used:
  3759 ;;		wreg, status,2, status,0, pclath, cstack
  3760 ;; Tracked objects:
  3761 ;;		On entry : 0/0
  3762 ;;		On exit  : 0/0
  3763 ;;		Unchanged: 0/0
  3764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3765 ;;      Params:         2       0       0       0       0       0       0
  3766 ;;      Locals:         2       0       0       0       0       0       0
  3767 ;;      Temps:          0       0       0       0       0       0       0
  3768 ;;      Totals:         4       0       0       0       0       0       0
  3769 ;;Total ram usage:        4 bytes
  3770 ;; Hardware stack levels used: 1
  3771 ;; Hardware stack levels required when called: 1
  3772 ;; This function calls:
  3773 ;;		_delay_x1o5us
  3774 ;; This function is called by:
  3775 ;;		_delay_ms
  3776 ;;		_lcd_Initialize
  3777 ;;		_lcd_ClearAll
  3778 ;; This function uses a non-reentrant model
  3779 ;;
  3780                           
  3781     037A                     _delay_x24o25us:	
  3782                           ;psect for function _delay_x24o25us
  3783                           
  3784     037A                     l1199:	
  3785                           ;incstack = 0
  3786                           ; Regs used in _delay_x24o25us: [wreg+status,2+status,0+pclath+cstack]
  3787                           
  3788                           
  3789                           ;program.c: 11:     for(uint16_t i=0; i<delay; i++) delay_x1o5us(15);
  3790     037A  01F4               	clrf	delay_x24o25us@i
  3791     037B  01F5               	clrf	delay_x24o25us@i+1
  3792     037C  2B85               	goto	l1205
  3793     037D                     l1201:
  3794     037D  300F               	movlw	15
  3795     037E  3183  2345  3183   	fcall	_delay_x1o5us
  3796     0381                     l1203:
  3797     0381  3001               	movlw	1
  3798     0382  07F4               	addwf	delay_x24o25us@i,f
  3799     0383  3000               	movlw	0
  3800     0384  3DF5               	addwfc	delay_x24o25us@i+1,f
  3801     0385                     l1205:
  3802     0385  0873               	movf	delay_x24o25us@delay+1,w
  3803     0386  0275               	subwf	delay_x24o25us@i+1,w
  3804     0387  1D03               	skipz
  3805     0388  2B8B               	goto	u555
  3806     0389  0872               	movf	delay_x24o25us@delay,w
  3807     038A  0274               	subwf	delay_x24o25us@i,w
  3808     038B                     u555:
  3809     038B  1C03               	skipc
  3810     038C  2B8E               	goto	u551
  3811     038D  2B8F               	goto	u550
  3812     038E                     u551:
  3813     038E  2B7D               	goto	l1201
  3814     038F                     u550:
  3815     038F                     l58:
  3816     038F  0008               	return
  3817     0390                     __end_of_delay_x24o25us:
  3818                           
  3819                           	psect	text21
  3820     0345                     __ptext21:	
  3821 ;; *************** function _delay_x1o5us *****************
  3822 ;; Defined at:
  3823 ;;		line 5 in file "program.c"
  3824 ;; Parameters:    Size  Location     Type
  3825 ;;  delay           1    wreg     unsigned char 
  3826 ;; Auto vars:     Size  Location     Type
  3827 ;;  delay           1    0[COMMON] unsigned char 
  3828 ;;  i               1    1[COMMON] unsigned char 
  3829 ;; Return value:  Size  Location     Type
  3830 ;;                  1    wreg      void 
  3831 ;; Registers used:
  3832 ;;		wreg, status,2, status,0
  3833 ;; Tracked objects:
  3834 ;;		On entry : 0/0
  3835 ;;		On exit  : 0/0
  3836 ;;		Unchanged: 0/0
  3837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3838 ;;      Params:         0       0       0       0       0       0       0
  3839 ;;      Locals:         2       0       0       0       0       0       0
  3840 ;;      Temps:          0       0       0       0       0       0       0
  3841 ;;      Totals:         2       0       0       0       0       0       0
  3842 ;;Total ram usage:        2 bytes
  3843 ;; Hardware stack levels used: 1
  3844 ;; This function calls:
  3845 ;;		Nothing
  3846 ;; This function is called by:
  3847 ;;		_delay_x24o25us
  3848 ;;		_lcd_DelaySetupTime
  3849 ;;		_lcd_DelayPulse
  3850 ;;		_lcd_WriteData
  3851 ;; This function uses a non-reentrant model
  3852 ;;
  3853                           
  3854     0345                     _delay_x1o5us:	
  3855                           ;psect for function _delay_x1o5us
  3856                           
  3857                           
  3858                           ;incstack = 0
  3859                           ; Regs used in _delay_x1o5us: [wreg+status,2+status,0]
  3860                           ;delay_x1o5us@delay stored from wreg
  3861     0345  00F0               	movwf	delay_x1o5us@delay
  3862     0346                     l1167:
  3863                           
  3864                           ;program.c: 6:     for(uint8_t i=0; i<delay; i++) __nop();
  3865     0346  01F1               	clrf	delay_x1o5us@i
  3866     0347  2B4B               	goto	l1171
  3867     0348                     l50:
  3868     0348  0000               	nop
  3869     0349                     l1169:
  3870     0349  3001               	movlw	1
  3871     034A  07F1               	addwf	delay_x1o5us@i,f
  3872     034B                     l1171:
  3873     034B  0870               	movf	delay_x1o5us@delay,w
  3874     034C  0271               	subwf	delay_x1o5us@i,w
  3875     034D  1C03               	skipc
  3876     034E  2B50               	goto	u471
  3877     034F  2B51               	goto	u470
  3878     0350                     u471:
  3879     0350  2B48               	goto	l50
  3880     0351                     u470:
  3881     0351                     l52:
  3882     0351  0008               	return
  3883     0352                     __end_of_delay_x1o5us:
  3884     0001                     ___latbits      equ	1
  3885     007E                     btemp           set	126	;btemp
  3886     007E                     wtemp0          set	126
  3887                           
  3888                           	psect	config
  3889                           
  3890                           ;Config register CONFIG1 @ 0x8007
  3891                           ;	Oscillator Selection
  3892                           ;	FOSC = HS, HS Oscillator, High-speed crystal/resonator connected between OSC1 and OSC2
      +                           pins
  3893                           ;	Watchdog Timer Enable
  3894                           ;	WDTE = OFF, WDT disabled
  3895                           ;	Power-up Timer Enable
  3896                           ;	PWRTE = OFF, PWRT disabled
  3897                           ;	MCLR Pin Function Select
  3898                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  3899                           ;	Flash Program Memory Code Protection
  3900                           ;	CP = OFF, Program memory code protection is disabled
  3901                           ;	Data Memory Code Protection
  3902                           ;	CPD = OFF, Data memory code protection is disabled
  3903                           ;	Brown-out Reset Enable
  3904                           ;	BOREN = OFF, Brown-out Reset disabled
  3905                           ;	Clock Out Enable
  3906                           ;	CLKOUTEN = ON, CLKOUT function is enabled on the CLKOUT pin
  3907                           ;	Internal/External Switchover
  3908                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  3909                           ;	Fail-Safe Clock Monitor Enable
  3910                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  3911     8007                     	org	32775
  3912     8007  01E2               	dw	482
  3913                           
  3914                           ;Config register CONFIG2 @ 0x8008
  3915                           ;	Flash Memory Self-Write Protection
  3916                           ;	WRT = OFF, Write protection off
  3917                           ;	Voltage Regulator Capacitor Enable bit
  3918                           ;	VCAPEN = OFF, Vcap functionality is disabled on RA6.
  3919                           ;	PLL Enable
  3920                           ;	PLLEN = ON, 4x PLL enabled
  3921                           ;	Stack Overflow/Underflow Reset Enable
  3922                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  3923                           ;	Brown-out Reset Voltage Selection
  3924                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  3925                           ;	Low Power Brown-Out Reset Enable Bit
  3926                           ;	LPBOR = 0x1, unprogrammed default
  3927                           ;	In-Circuit Debugger Mode
  3928                           ;	DEBUG = OFF, In-Circuit Debugger disabled, ICSPCLK and ICSPDAT are general purpose I/O
      +                           pins
  3929                           ;	Low-Voltage Programming Enable
  3930                           ;	LVP = ON, Low-voltage programming enabled
  3931     8008                     	org	32776
  3932     8008  3FFF               	dw	16383

Data Sizes:
    Strings     14
    Constant    0
    Data        0
    BSS         0
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     50      50
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0

Pointer List with Targets:

    lcd_PrintString@string	PTR unsigned char  size(2) Largest target is 14
		 -> lcd_PrintDigitInt32@numberChar(BANK0[11]), lcd_PrintInt32@numberChar(COMMON[11]), STR_1(CODE[14]), 

    memset@dest	PTR void  size(1) Largest target is 11
		 -> lcd_PrintDigitInt32@numberChar(BANK0[11]), lcd_PrintDigitInt32@numberRevChar(BANK0[11]), lcd_PrintInt32@numberChar(COMMON[11]), lcd_PrintInt32@numberRevChar(COMMON[11]), 

    memset@p	PTR unsigned char  size(1) Largest target is 11
		 -> lcd_PrintDigitInt32@numberChar(BANK0[11]), lcd_PrintDigitInt32@numberRevChar(BANK0[11]), lcd_PrintInt32@numberChar(COMMON[11]), lcd_PrintInt32@numberRevChar(COMMON[11]), 

    sp__memset	PTR void  size(1) Largest target is 11
		 -> lcd_PrintDigitInt32@numberChar(BANK0[11]), lcd_PrintDigitInt32@numberRevChar(BANK0[11]), lcd_PrintInt32@numberChar(COMMON[11]), lcd_PrintInt32@numberRevChar(COMMON[11]), 


Critical Paths under _main in COMMON

    _programLoop->_delay_ms
    _lcd_PrintDigitInt32->___aldiv
    _lcd_PrintString->_lcd_PrintChar
    _lcd_PrintChar->_lcd_WriteData
    _lcd_Goto->_lcd_PrintCmd
    _lcd_Initialize->_delay_ms
    _lcd_PrintCmd->_lcd_WriteData
    _lcd_WriteData->_delay_x1o5us
    _lcd_DelayPulse->_delay_x1o5us
    _lcd_DelaySetupTime->_delay_x1o5us
    _delay_ms->_delay_x24o25us
    _delay_x24o25us->_delay_x1o5us

Critical Paths under _main in BANK0

    _main->_programLoop
    _programLoop->_lcd_PrintDigitInt32

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4425
                  _programInitialize
                        _programLoop
 ---------------------------------------------------------------------------------
 (1) _programLoop                                         10    10      0    3749
                                             41 BANK0      9     9      0
                           _delay_ms
                           _lcd_Goto
                _lcd_PrintDigitInt32
                    _lcd_PrintString
                    _smotor_MoveStep
                        _smotor_Rest
 ---------------------------------------------------------------------------------
 (2) _smotor_MoveStep                                      1     1      0      29
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcd_PrintDigitInt32                                 41    34      7    2117
                                              0 BANK0     41    34      7
                            ___aldiv
                             ___bmul
                               _labs
                      _lcd_PrintChar
                    _lcd_PrintString
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               6     1      5     108
                                              0 COMMON     6     1      5
 ---------------------------------------------------------------------------------
 (2) _lcd_PrintString                                      3     1      2     468
                                              6 COMMON     3     1      2
                      _lcd_PrintChar
 ---------------------------------------------------------------------------------
 (3) _lcd_PrintChar                                        1     1      0     420
                                              5 COMMON     1     1      0
                 _lcd_DelaySetupTime
                      _lcd_WriteData
 ---------------------------------------------------------------------------------
 (3) _labs                                                 4     0      4      68
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1     109
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     304
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (2) _lcd_Goto                                             2     1      1     521
                                              6 COMMON     2     1      1
                       _lcd_PrintCmd
 ---------------------------------------------------------------------------------
 (1) _programInitialize                                    0     0      0     676
                     _lcd_Initialize
                        _smotor_Rest
 ---------------------------------------------------------------------------------
 (2) _smotor_Rest                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _lcd_Initialize                                       0     0      0     676
                           _delay_ms
                     _delay_x24o25us
                       _lcd_PrintCmd
 ---------------------------------------------------------------------------------
 (3) _lcd_PrintCmd                                         1     1      0     420
                                              5 COMMON     1     1      0
                 _lcd_DelaySetupTime
                      _lcd_WriteData
 ---------------------------------------------------------------------------------
 (4) _lcd_WriteData                                        3     3      0     338
                                              2 COMMON     3     3      0
                       _delay_x1o5us
                         _lcd_EPulse
 ---------------------------------------------------------------------------------
 (5) _lcd_EPulse                                           0     0      0      53
                     _lcd_DelayPulse
 ---------------------------------------------------------------------------------
 (6) _lcd_DelayPulse                                       0     0      0      53
                       _delay_x1o5us
 ---------------------------------------------------------------------------------
 (4) _lcd_DelaySetupTime                                   0     0      0      53
                       _delay_x1o5us
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             8     4      4     154
                                              6 COMMON     8     4      4
                     _delay_x24o25us
 ---------------------------------------------------------------------------------
 (3) _delay_x24o25us                                       4     2      2     102
                                              2 COMMON     4     2      2
                       _delay_x1o5us
 ---------------------------------------------------------------------------------
 (7) _delay_x1o5us                                         2     2      0      53
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _programInitialize
     _lcd_Initialize
       _delay_ms
         _delay_x24o25us
           _delay_x1o5us
       _delay_x24o25us
       _lcd_PrintCmd
         _lcd_DelaySetupTime
           _delay_x1o5us
         _lcd_WriteData
           _delay_x1o5us
           _lcd_EPulse
             _lcd_DelayPulse
               _delay_x1o5us
     _smotor_Rest
   _programLoop
     _delay_ms
     _lcd_Goto
       _lcd_PrintCmd
     _lcd_PrintDigitInt32
       ___aldiv
       ___bmul
       _labs
       _lcd_PrintChar
         _lcd_DelaySetupTime
         _lcd_WriteData
       _lcd_PrintString
         _lcd_PrintChar
       _memset
     _lcd_PrintString
     _smotor_MoveStep
     _smotor_Rest

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK2            80      0       0      0.0%
BITBANK3            80      0       0      0.0%
BITBANK4            80      0       0      0.0%
BITBANK5            80      0       0      0.0%
BIGRAM             480      0       0      0.0%
COMMON              14     14      14    100.0%
BANK0               80     50      50     62.5%
BANK1               80      0       0      0.0%
BANK2               80      0       0      0.0%
BANK3               80      0       0      0.0%
BANK4               80      0       0      0.0%
BANK5               80      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      64      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Thu Sep 26 17:38:14 2024

                  ??_lcd_PrintCmd 0075                    ___bmul@product 0071                _lcd_DelaySetupTime 030B  
                              l50 0348                                l52 0351                                l64 0403  
                              l58 038F                                l67 0435                                l78 0756  
                              l98 030F                   ??_lcd_PrintChar 0075                               l101 0314  
                             l110 0339                               l104 032E                               l113 0468  
                             l107 053D                               l124 03DA                               l133 03A6  
                             l127 0344                               l160 031A                               l145 05F2  
                             l170 0489                               l171 048F                               l172 0495  
                             l164 046B                               l157 069C                               l350 0364  
                             l166 0471                               l174 04B5                               l167 0477  
                             l168 047D                               l169 0483                               l389 0550  
                             l399 05C8                               l793 03BD                               l787 0379  
                             u600 0358                               u505 04DA                               u601 0357  
                             u610 0363                               u515 04EA                               u611 0362  
                             u700 05B0                               u620 0543                               u525 04FE  
                             u701 05AF                               u621 0542                               u470 0351  
                             u550 038F                               u710 05B5                               u630 0554  
                             u471 0350                               u551 038E                               u535 050F  
                             u711 05B4                               u631 0553                               u560 0403  
                             u640 0571                               u720 05E9                               u800 0714  
                             u561 0402                               u545 051E                               u641 0570  
                             u721 05E8                               u801 0713                               u570 03A6  
                             u730 05EE                               u810 071C                               u555 038B  
                             u571 03A5                               u731 05ED                               u811 071B  
                             u660 0581                               u580 03BD                               u740 060D  
                             u820 0756                               u565 03FF                               u485 04BA  
                             u661 0580                               u581 03BC                               u741 060C  
                             u821 0755                               u590 0369                               u750 0650  
                             u830 075A                               u495 04CB                               u655 0575  
                             u591 0368                               u751 064F                               u831 0759  
                             u680 059A                               u760 065A                               u840 0763  
                             u681 0599                               u761 0659                               u841 0762  
                             u770 067B                               u850 079D                               u675 0582  
                             u771 067A                               u851 079C                               u780 0684  
                             u860 07B2                               u685 0596                               u781 0683  
                             u861 07B1                               u870 07BB                               u790 06DC  
                             u695 05A4                               u775 0677                               u871 07BA  
                             u791 06DB                               u880 07F3                               u881 07F2  
                             u890 07FB                               u891 07FA               ?_lcd_DelaySetupTime 0070  
                     _smotor_Rest 0315                               wreg 0009               _lcd_PrintDigitInt32 05C9  
            programLoop@angleStep 004D                              l1201 037D                              l1203 0381  
                            l1211 03DB                              l1205 0385                              l1213 03E4  
                            l1301 0436                              l1221 0391                              l1215 03EB  
                            l1303 0315                              l1311 03CC                              l1207 033B  
                            l1223 0399                              l1231 03A7                              l1217 03F1  
                            l1305 03BF                              l1241 0369                              l1209 033D  
                            l1225 039D                              l1233 03AA                              l1321 05D8  
                            l1401 06D4                              l1171 034B                              l1227 0330  
                            l1307 03C0                              l1315 03D2                              l1251 0358  
                            l1243 036A                              l1219 0390                              l1235 03AF  
                            l1331 060D                              l1323 05E4                              l1411 06E9  
                            l1403 06D6                              l1181 030B                              l1173 0310  
                            l1229 0332                              l1309 03C6                              l1261 053E  
                            l1253 035A                              l1237 03B1                              l1341 0646  
                            l1333 0611                              l1325 05E9                              l1317 05C9  
                            l1413 06EE                              l1405 06DC                              l1421 070F  
                            l1167 0346                              l1175 0324                              l1191 051B  
                            l1183 04B7                              l1271 0561                              l1263 053F  
                            l1255 035C                              l1247 0353                              l1239 0365  
                            l1351 065A                              l1343 0648                              l1335 061A  
                            l1327 05EE                              l1319 05CC                              l1431 072B  
                            l1423 0715                              l1415 0700                              l1407 06DE  
                            l1169 0349                              l1177 0326                              l1193 052B  
                            l1185 04F8                              l1281 0581                              l1273 0569  
                            l1265 0543                              l1257 0363                              l1249 0354  
                            l1361 067E                              l1353 065F                              l1345 0650  
                            l1337 0636                              l1329 0608                              l1433 0730  
                            l1425 071C                              l1441 0751                              l1417 070C  
                            l1409 06E2                              l1179 0329                              l1195 0536  
                            l1187 04FB                              l1291 05AA                              l1283 0588  
                            l1275 0571                              l1267 0554                              l1371 0692  
                            l1363 067F                              l1355 0663                              l1347 0652  
                            l1339 063F                              l1451 0769                              l1435 0742  
                            l1427 071E                              l1419 070C                              l1197 0539  
                            l1189 050C                              l1285 059A                              l1277 0574  
                            l1293 05B0                              l1269 055F                              l1349 0654  
                            l1357 0666                              l1381 049B                              l1461 079D  
                            l1453 0772                              l1445 075B                              l1437 074E  
                            l1429 0722                              l1199 037A                              l1383 0404  
                            l1295 05B5                              l1287 05A2                              l1279 057D  
                            l1375 0695                              l1367 0685                              l1359 067B  
                            l1471 07BB                              l1463 079D                              l1455 077D  
                            l1447 0763                              l1439 074E                              l1391 06AE  
                            l1385 042F                              l1297 05C0                              l1289 05A3  
                            l1369 0690                              l1377 046A                              l1481 07D8  
                            l1473 07BD                              l1457 0782                              l1449 0765  
                            l1465 07A0                              l1393 06C0                              l1387 0432  
                            l1483 07EA                              l1475 07C1                              l1467 07B3  
                            l1459 0794                              l1395 06C3                              l1491 031B  
                            l1485 07F3                              l1477 07C8                              l1469 07B5  
                            l1397 06CB                              l1389 069D                              l1493 031E  
                            l1487 07F3                              l1479 07D3                              l1399 06D3  
                            l1489 07F6                              STR_1 0800                   ??_lcd_WriteData 0072  
                            _labs 0365                              _main 031B                              fsr0h 0005  
                            fsr1h 0007                              indf0 0000                              fsr0l 0004  
                            indf1 0001                              fsr1l 0006                              btemp 007E  
            ??_lcd_DelaySetupTime 0072                              start 0002              ?_lcd_PrintDigitInt32 0020  
               ___bmul@multiplier 0072              __end_of_delay_x1o5us 0352                 ??_lcd_PrintString 0078  
                 __end_of___aldiv 05C9                             ?_labs 0070                             ?_main 0070  
                           labs@a 0070               delay_x24o25us@delay 0072                             status 0003  
                           wtemp0 007E              programLoop@stepMotor 0051             ??_lcd_PrintDigitInt32 0027  
                 __initialization 07FD                      __end_of_labs 037A                      __end_of_main 0324  
                          ??_labs 0074                            ??_main 007E          lcd_PrintDigitInt32@tempC 0045  
        lcd_PrintDigitInt32@tempN 0041              __end_of_lcd_PrintCmd 033A                  __end_of_delay_ms 0404  
               delay_x1o5us@delay 0070                  __end_of_lcd_Goto 03DB                            ___bmul 0352  
                       ??___aldiv 0078                 ??_smotor_MoveStep 0070                            _memset 03A7  
                  _delay_x24o25us 037A            lcd_PrintChar@character 0075           __end_of__initialization 07FD  
   lcd_PrintDigitInt32@numberChar 0036                      ?_programLoop 0070               ___bmul@multiplicand 0070  
                  __pcstackCOMMON 0070               lcd_PrintCmd@command 0075            __end_of_delay_x24o25us 0390  
   lcd_PrintDigitInt32@totalDigit 0047                      ?_smotor_Rest 0070                      _delay_x1o5us 0345  
               _programInitialize 0404                   _lcd_PrintString 0390                        __pmaintext 031B  
              ?_programInitialize 0070                           ?___bmul 0070                        _lcd_EPulse 0324  
                 ?_delay_x24o25us 0072                           ?_memset 0070               ??_programInitialize 007E  
           __end_of_lcd_PrintChar 0345                         ?_delay_ms 0076                         ?_lcd_Goto 0076  
       __end_of_programInitialize 0436             __end_of_lcd_WriteData 053E             lcd_PrintDigitInt32@i1 0048  
           lcd_PrintDigitInt32@i2 0046                           ___aldiv 053E                      _lcd_PrintCmd 032F  
                         __ptext1 069D                           __ptext2 0469                           __ptext3 05C9  
                         __ptext4 03A7                           __ptext5 0390                           __ptext6 033A  
                         __ptext7 0365                           __ptext8 0352                           __ptext9 053E  
                ___aldiv@dividend 0074                        ??_delay_ms 007A                        ??_lcd_Goto 0077  
            end_of_initialization 07FD           __end_of_lcd_PrintString 03A7        lcd_PrintDigitInt32@noDigit 0024  
     __end_of_lcd_PrintDigitInt32 069D                   _smotor_MoveStep 0469                           memset@c 0071  
                         memset@n 0073                           memset@p 0075                  ___aldiv@quotient 007A  
                     ?_lcd_EPulse 0070                         _PORTAbits 000C                         _TRISAbits 008C  
                       _TRISBbits 008D                         _TRISCbits 008E                    _lcd_DelayPulse 0310  
                programLoop@delay 0049                     delay_x1o5us@i 0071                    __end_of___bmul 0365  
                   delay_ms@delay 0076                    __end_of_memset 03BE            __end_of_lcd_DelayPulse 0315  
             start_initialization 07FD           __end_of_smotor_MoveStep 04B6                  ?_lcd_PrintString 0076  
lcd_PrintDigitInt32@numberRevChar 002B                    _lcd_Initialize 0436                  ??_delay_x24o25us 0074  
                        ??___bmul 0071                          ??_memset 0075                        memset@dest 0070  
                 ?_lcd_DelayPulse 0070                         ___latbits 0001                     __pcstackBANK0 0020  
          __end_of_lcd_Initialize 0469                          ?___aldiv 0070                  ?_smotor_MoveStep 0070  
                 ?_lcd_Initialize 0070                   ___aldiv@divisor 0070        __end_of_lcd_DelaySetupTime 0310  
                 ___aldiv@counter 0078                          _LATBbits 010D                          _LATCbits 010E  
             smotor_MoveStep@step 0070                         delay_ms@i 007A                      ??_lcd_EPulse 0072  
                       lcd_Goto@x 0076                         lcd_Goto@y 0077                 lcd_WriteData@data 0074  
              __end_of_lcd_EPulse 032F                     ??_programLoop 007E                        _ANSELAbits 018C  
                      _ANSELBbits 018D                     ??_smotor_Rest 0070                     _lcd_PrintChar 033A  
                        _delay_ms 03DB                          __ptext10 03BE                          __ptext11 0404  
                        __ptext20 037A                          __ptext12 0315                          __ptext21 0345  
                        __ptext13 0436                          __ptext14 032F                          __ptext15 04B6  
                        __ptext16 0324                          __ptext17 0310                          __ptext18 030B  
                        __ptext19 03DB                          _lcd_Goto 03BE                     ?_delay_x1o5us 0070  
                   _lcd_WriteData 04B6               __end_of_programLoop 07FD                  ??_lcd_DelayPulse 0072  
                  ?_lcd_PrintChar 0070                    ??_delay_x1o5us 0070               __end_of_smotor_Rest 031B  
                  ?_lcd_WriteData 0070         lcd_PrintDigitInt32@enSign 0025         lcd_PrintDigitInt32@enZero 0026  
       lcd_PrintDigitInt32@number 0020                   delay_x24o25us@i 0074                     ?_lcd_PrintCmd 0070  
                   __pstringtext1 0800                     __pstringtext2 0000                      ___aldiv@sign 0079  
                ??_lcd_Initialize 007E             lcd_PrintString@string 0076                       _programLoop 069D  
